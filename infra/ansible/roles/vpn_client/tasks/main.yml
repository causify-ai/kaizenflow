---
# Variables for region-based configurations
- name: Initialize VPN configuration based on region
  block:

  - name: Set CA password for region
    ansible.builtin.set_fact:
      easyrsa_ca_password: "{{ 'easyrsa_ca_password_vpn1_' + vpn_region }}"

  - name: Load VPN server variables for region
    ansible.builtin.include_vars:
      file: "vpn1-{{ vpn_region }}.yml"

  no_log: true
  when: vpn_region in ['eu', 'us']

# User Addition Tasks
- name: User Addition Tasks
  block:

  # OpenVPN User Configuration
  - name: Create Operating System User for MFA
    ansible.builtin.user:
      name: "{{ openvpn_client_username }}"
      password: "{{ lookup('password', password_file_path + ' chars=ascii_lowercase,ascii_uppercase,digits') | password_hash('sha512') }}"
      shell: /sbin/nologin

  - name: Run Google Authenticator Setup for VPN User
    ansible.builtin.command:
      cmd: "/usr/bin/google-authenticator -t -d -r3 -R30 -W -l '{{ openvpn_client_username }}@{{ openvpn_server_common_name }}' -f -s {{ gauth_dir }}/{{ openvpn_client_username }}"
      creates: "{{ gauth_dir }}/{{ openvpn_client_username }}"
    register: result_totp_seed

  - name: Set Permissions for MFA Seed
    ansible.builtin.file:
      path: "{{ gauth_dir }}/{{ openvpn_client_username }}"
      owner: "{{ gauth_username }}"
      group: "{{ gauth_group }}"
      mode: 0400

  # OpenVPN PKI Configuration
  - name: Create Certificate for VPN Client
    ansible.builtin.expect:
      command: './easyrsa build-client-full "{{ openvpn_client_username }}@{{ openvpn_server_common_name }}" --req-cn "{{ openvpn_client_username }}"'
      responses:
        'Enter PEM pass phrase:$': "{{ lookup('password', pem_passphrase_file_path + ' chars=ascii_lowercase,ascii_uppercase,digits') }}"
        'Verifying - Enter PEM pass phrase:$': "{{ lookup('password', pem_passphrase_file_path) }}"
        'Enter pass phrase for .*?:$': "{{ easyrsa_ca_password }}"
      chdir: "{{ easyrsa_dir }}"
      creates: "{{ easyrsa_pki_client_key }}"
    no_log: true

  - name: Create Directory for VPN Client Configuration
    ansible.builtin.file:
      path: "{{ openvpn_path_ovpn }}"
      mode: 0700
      state: directory

  - name: Write MFA Seed Initialization to File
    ansible.builtin.copy:
      content: "{{ result_totp_seed.stdout_lines }}"
      dest: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}-totp.seed"
    when: "'exists' not in result_totp_seed.stdout"

  # Slurp Configuration Data
  - name: Slurp Configuration
    block:

      - name: Load VPN Server CA Cert
        ansible.builtin.slurp:
          src: "{{ easyrsa_pki_ca_cert }}"
        register: slurped_ca

      - name: Load VPN Client Cert
        ansible.builtin.slurp:
          src: "{{ easyrsa_pki_client_cert }}"
        register: slurped_client_cert

      - name: Load VPN Client Key
        ansible.builtin.slurp:
          src: "{{ easyrsa_pki_client_key }}"
        register: slurped_client_key


      - name: Load VPN Server TA Key
        ansible.builtin.slurp:
          src: "{{ openvpn_ta_key }}"
        register: slurped_openvpn_ta_key

    no_log: true

  - name: Set Facts from Slurped Config Data
    ansible.builtin.set_fact:
      easyrsa_pki_ca_cert_content: "{{ slurped_ca.content | b64decode | trim }}"
      easyrsa_pki_client_cert_content: "{{ slurped_client_cert.content | b64decode | trim }}"
      easyrsa_pki_client_key_content: "{{ slurped_client_key.content | b64decode | trim }}"
      openvpn_ta_key_content: "{{ slurped_openvpn_ta_key.content | b64decode | trim }}"
    no_log: true

  # Generate VPN Client Configurations
  - name: Generate VPN Client Configurations
    block:

    - name: Create client-specific CCD configuration
      ansible.builtin.template:
        src: client_ccd.j2
        dest: "{{ openvpn_path_ccd }}/{{ openvpn_client_username }}"
        mode: 0644
      when: openvpn_server_client_extra_options | length > 0

    - name: Build Client Configuration (Embedded PKI)
      ansible.builtin.template:
        src: client_pki_embedded.ovpn.j2
        dest: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}-pki-embedded.ovpn"
        mode: 0400

    - name: Build Client Configuration (External PKI Files)
      ansible.builtin.template:
        src: client_pki_files.ovpn.j2
        dest: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}-pki-files.ovpn"
        mode: 0400

    - name: Build Client Configuration (External PKCS12)
      ansible.builtin.template:
        src: client_pki_pkcs12.ovpn.j2
        dest: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}-pki-pkcs12.ovpn"
        mode: 0400

    - name: Generate PKCS#12 File for Client
      community.crypto.openssl_pkcs12:
        action: export
        passphrase: "{{ openvpn_client_p12_passphrase }}"
        privatekey_passphrase: "{{ lookup('password', pem_passphrase_file_path) }}"
        path: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}.p12"
        friendly_name: "{{ openvpn_client_username }}"
        certificate_path: "{{ easyrsa_pki_client_cert }}"
        privatekey_path: "{{ easyrsa_pki_client_key }}"
        other_certificates: "{{ easyrsa_pki_ca_cert }}"
        state: present

    no_log: true

  # VPN Client Data Export
  - name: VPN Client Data Export
    block:

    - name: Export TOTP Seed File for Client
      ansible.builtin.fetch:
        src: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}-totp.seed"
        dest: "{{ vpn_client_export_bundle_dir }}/{{ item }}"
        flat: yes
      loop:
        - "{{ openvpn_client_username }}@{{ openvpn_server_common_name }}_embedded/"

    - name: Export Embedded PKI Configuration for Client
      ansible.builtin.fetch:
        src: "{{ openvpn_path_ovpn }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}-pki-embedded.ovpn"
        dest: "{{ vpn_client_export_bundle_dir }}/{{ openvpn_client_username }}@{{ openvpn_server_common_name }}_embedded/"
        flat: yes

  become: true
  when: vpn_client_action == "add"

# User Removal Tasks
- name: User Removal Tasks
  block:

  - name: Revoke client access on OpenVPN server
    ansible.builtin.expect:
      command: "./easyrsa revoke {{ openvpn_client_username }}@{{ openvpn_server_common_name }}"
      responses:
        'Enter pass phrase for .*?:$': "{{ easyrsa_ca_password }}"
      chdir: "{{ easyrsa_dir }}"
    no_log: true

  - name: Rebuild Certificate Revocation List (CRL) for OpenVPN
    ansible.builtin.expect:
      command: ./easyrsa gen-crl
      responses:
        'Enter pass phrase for .*?:$': "{{ easyrsa_ca_password }}"
      chdir: "{{ easyrsa_dir }}"
    no_log: true

  - name: Remove MFA user from Operating System
    ansible.builtin.user:
      name: "{{ openvpn_client_username }}"
      state: absent
      remove: yes

  - name: Remove Google Authenticator seed for user
    ansible.builtin.file:
      path: "{{ gauth_dir }}/{{ openvpn_client_username }}"
      state: absent

  become: true
  when: vpn_client_action == "remove"

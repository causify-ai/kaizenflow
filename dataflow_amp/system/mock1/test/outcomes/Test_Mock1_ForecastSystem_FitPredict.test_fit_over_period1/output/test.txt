################################################################################
system_config
################################################################################
dag_config:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',), ('feature1',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap', 'feature1': 'feature1'}, 'mean', {})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  compute_vol:
    in_col_group: ('vwap.ret_0',)
    out_col_group: ('vwap.ret_0.vol',)
    drop_nans: True
    permitted_exceptions: (<class 'ValueError'>,)
  adjust_rets:
    in_col_groups: [('vwap.ret_0',), ('vwap.ret_0.vol',)]
    out_col_group: ()
    transformer_kwargs:
      term1_col: vwap.ret_0
      term2_col: vwap.ret_0.vol
      out_col: vwap.ret_0.vol_adj
      term2_delay: 2
      operation: div
    drop_nans: True
  compress_rets:
    in_col_groups: [('vwap.ret_0.vol_adj',)]
    out_col_group: ()
    col_mapping:
      vwap.ret_0.vol_adj: vwap.ret_0.vol_adj.c
dag_builder_object: nid_prefix=
dag_builder_class: Mock1_DagBuilder
system_class: Mock1_ForecastSystem
system_log_dir: $GIT_ROOT/dataflow_amp/system/mock1/test/outcomes/Test_Mock1_ForecastSystem_FitPredict.test_fit_over_period1/tmp.scratch/system_log_dir
backtest_config:
  universe_str: mock1_v1-top2
  trading_period_str: 5T
  time_interval_str: Jan2000
  freq_as_pd_str: M
  lookback_as_pd_str: 10D
  start_timestamp_with_lookback: 2000-01-01 00:00:00+00:00
  end_timestamp: 2000-01-31 00:00:00+00:00
market_data_config:
  im_client_ctor: <function get_DataFrameImClient_example1>
  im_client_config:

  im_client: <im_v2.common.data.client.data_frame_im_clients.DataFrameImClient object>
  asset_ids: [3303714233, 1467591036]
  asset_id_col_name: asset_id
research_forecast_evaluator_from_prices:
  style: cross_sectional
  init:
    price_col: vwap
    volatility_col: vwap.ret_0.vol
    prediction_col: vwap.ret_0.vol_adj.c
  kwargs:
    target_gmv: 100000.0
    liquidate_at_end_of_day: False
market_object: ImClientMarketData at 0x=(_asset_id_col=asset_id <str>, _asset_ids=[3303714233, 1467591036] <list>, _start_time_col_name=start_ts <str>, _end_time_col_name=end_ts <str>, _columns=None <NoneType>, _sleep_in_secs=1.0 <float>, _timezone=America/New_York <str>, _column_remap=None <NoneType>, _filter_data_mode=assert <str>, _max_iterations=120 <int>, _im_client=<im_v2.common.data.client.data_frame_im_clients.DataFrameImClient object> <im_v2.common.data.client.data_frame_im_clients.DataFrameImClient>)
object.str:
  market_object:
    <market_data.im_client_market_data.ImClientMarketData at 0x>:
      _asset_id_col='asset_id' <str>
      _asset_ids='[3303714233, 1467591036]' <list>
      _start_time_col_name='start_ts' <str>
      _end_time_col_name='end_ts' <str>
      _columns='None' <NoneType>
      _sleep_in_secs='1.0' <float>
      _timezone='America/New_York' <str>
      _column_remap='None' <NoneType>
      _filter_data_mode='assert' <str>
      _max_iterations='120' <int>
      _im_client='<im_v2.common.data.client.data_frame_im_clients.DataFrameImClient object>' <im_v2.common.data.client.data_frame_im_clients.DataFrameImClient>
  dag_object:
    <dataflow.core.dag.DAG at 0x>:
      _nx_dag='DiGraph with 7 nodes and 6 edges' <networkx.classes.digraph.DiGraph>
      _name='None' <NoneType>
      _mode='strict' <str>
      _save_node_io='' <str>
      _profile_execution='False' <bool>
      _dst_dir='None' <NoneType>
      force_free_nodes='False' <bool>
      nodes=[('filter_ath', {'stage': <dataflow.core.nodes.transformers.ColumnTransformer object at 0x>}), ('resample', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compute_ret_0', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compute_vol', {'stage': <dataflow.core.nodes.transformers.SeriesToSeriesTransformer object at 0x>}), ('adjust_rets', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compress_rets', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object>}), ('read_data', {'stage': <dataflow.system.source_nodes.HistoricalDataSource object>})]
      edges=[('filter_ath', 'resample', {'df_in': 'df_out'}), ('resample', 'compute_ret_0', {'df_in': 'df_out'}), ('compute_ret_0', 'compute_vol', {'df_in': 'df_out'}), ('compute_vol', 'adjust_rets', {'df_in': 'df_out'}), ('adjust_rets', 'compress_rets', {'df_in': 'df_out'}), ('read_data', 'filter_ath', {'df_in': 'df_out'})]
      json=
      {
          "directed": true,
          "graph": {},
          "links": [
              {
                  "df_in": "df_out",
                  "source": "filter_ath",
                  "target": "resample"
              },
              {
                  "df_in": "df_out",
                  "source": "resample",
                  "target": "compute_ret_0"
              },
              {
                  "df_in": "df_out",
                  "source": "compute_ret_0",
                  "target": "compute_vol"
              },
              {
                  "df_in": "df_out",
                  "source": "compute_vol",
                  "target": "adjust_rets"
              },
              {
                  "df_in": "df_out",
                  "source": "adjust_rets",
                  "target": "compress_rets"
              },
              {
                  "df_in": "df_out",
                  "source": "read_data",
                  "target": "filter_ath"
              }
          ],
          "multigraph": false,
          "nodes": [
              {
                  "id": "filter_ath",
                  "stage": "ColumnTransformer"
              },
              {
                  "id": "resample",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compute_ret_0",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compute_vol",
                  "stage": "SeriesToSeriesTransformer"
              },
              {
                  "id": "adjust_rets",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compress_rets",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "read_data",
                  "stage": "HistoricalDataSource"
              }
          ]
      }
  dag_runner_object:
    <dataflow.core.dag_runner.FitPredictDagRunner at 0x>:
      dag= <dataflow.core.dag.DAG>
        <dataflow.core.dag.DAG at 0x>:
          _nx_dag='DiGraph with 7 nodes and 6 edges' <networkx.classes.digraph.DiGraph>
          _name='None' <NoneType>
          _mode='strict' <str>
          _save_node_io='' <str>
          _profile_execution='False' <bool>
          _dst_dir='None' <NoneType>
          force_free_nodes='False' <bool>
          nodes=[('filter_ath', {'stage': <dataflow.core.nodes.transformers.ColumnTransformer object at 0x>}), ('resample', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compute_ret_0', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compute_vol', {'stage': <dataflow.core.nodes.transformers.SeriesToSeriesTransformer object at 0x>}), ('adjust_rets', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compress_rets', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object>}), ('read_data', {'stage': <dataflow.system.source_nodes.HistoricalDataSource object>})]
          edges=[('filter_ath', 'resample', {'df_in': 'df_out'}), ('resample', 'compute_ret_0', {'df_in': 'df_out'}), ('compute_ret_0', 'compute_vol', {'df_in': 'df_out'}), ('compute_vol', 'adjust_rets', {'df_in': 'df_out'}), ('adjust_rets', 'compress_rets', {'df_in': 'df_out'}), ('read_data', 'filter_ath', {'df_in': 'df_out'})]
          json=
          {
              "directed": true,
              "graph": {},
              "links": [
                  {
                      "df_in": "df_out",
                      "source": "filter_ath",
                      "target": "resample"
                  },
                  {
                      "df_in": "df_out",
                      "source": "resample",
                      "target": "compute_ret_0"
                  },
                  {
                      "df_in": "df_out",
                      "source": "compute_ret_0",
                      "target": "compute_vol"
                  },
                  {
                      "df_in": "df_out",
                      "source": "compute_vol",
                      "target": "adjust_rets"
                  },
                  {
                      "df_in": "df_out",
                      "source": "adjust_rets",
                      "target": "compress_rets"
                  },
                  {
                      "df_in": "df_out",
                      "source": "read_data",
                      "target": "filter_ath"
                  }
              ],
              "multigraph": false,
              "nodes": [
                  {
                      "id": "filter_ath",
                      "stage": "ColumnTransformer"
                  },
                  {
                      "id": "resample",
                      "stage": "GroupedColDfToDfTransformer"
                  },
                  {
                      "id": "compute_ret_0",
                      "stage": "GroupedColDfToDfTransformer"
                  },
                  {
                      "id": "compute_vol",
                      "stage": "SeriesToSeriesTransformer"
                  },
                  {
                      "id": "adjust_rets",
                      "stage": "GroupedColDfToDfTransformer"
                  },
                  {
                      "id": "compress_rets",
                      "stage": "GroupedColDfToDfTransformer"
                  },
                  {
                      "id": "read_data",
                      "stage": "HistoricalDataSource"
                  }
              ]
          }
      config='' <core.config.config_.Config>
      _column_to_tags_mapping='None' <NoneType>
      _result_nid='compress_rets' <str>
object.builder_function:
  market_object: dataflow_amp.system.mock1.mock1_forecast_system._get_market_data
  dag_object: dataflow_amp.system.mock1.mock1_forecast_system._get_dag
  dag_runner_object: dataflow_amp.system.mock1.mock1_forecast_system._get_dag_runner
dag_object: DAG at 0x=(_nx_dag=DiGraph with 7 nodes and 6 edges <networkx.classes.digraph.DiGraph>, _name=None <NoneType>, _mode=strict <str>, _save_node_io= <str>, _profile_execution=False <bool>, _dst_dir=None <NoneType>, force_free_nodes=False <bool>)
dag_runner_object: FitPredictDagRunner at 0x=(dag=DAG at 0x=(_nx_dag=DiGraph with 7 nodes and 6 edges <networkx.classes.digraph.DiGraph>, _name=None <NoneType>, _mode=strict <str>, _save_node_io= <str>, _profile_execution=False <bool>, _dst_dir=None <NoneType>, force_free_nodes=False <bool>) <dataflow.core.dag.DAG>, config= <core.config.config_.Config>, _column_to_tags_mapping=None <NoneType>, _result_nid=compress_rets <str>)
################################################################################
vwap.ret_0.vol_adj.c
################################################################################
                           1467591036  3303714233
end_ts
2000-01-01 10:00:00-05:00       -0.98       -0.98
2000-01-01 10:05:00-05:00        0.98        0.98
2000-01-01 10:10:00-05:00       -0.98       -0.98
2000-01-01 10:15:00-05:00        0.98        0.98
2000-01-01 10:20:00-05:00       -0.98       -0.98
2000-01-01 10:25:00-05:00        0.98        0.98
2000-01-01 10:30:00-05:00       -0.98       -0.98
2000-01-01 10:35:00-05:00        0.98        0.98
2000-01-01 10:40:00-05:00       -0.98       -0.98
2000-01-01 10:45:00-05:00        0.98        0.98
2000-01-01 10:50:00-05:00       -0.98       -0.98
2000-01-01 10:55:00-05:00        0.98        0.98
2000-01-01 11:00:00-05:00       -0.98       -0.98
2000-01-01 11:05:00-05:00        0.98        0.98
2000-01-01 11:10:00-05:00       -0.98       -0.98
2000-01-01 11:15:00-05:00        0.98        0.98
2000-01-01 11:20:00-05:00       -0.98       -0.98
2000-01-01 11:25:00-05:00        0.98        0.98
2000-01-01 11:30:00-05:00       -0.98       -0.98
2000-01-01 11:35:00-05:00        0.98        0.98
2000-01-01 11:40:00-05:00       -0.98       -0.98
2000-01-01 11:45:00-05:00        0.98        0.98
2000-01-01 11:50:00-05:00       -0.98       -0.98
2000-01-01 11:55:00-05:00        0.98        0.98
2000-01-01 12:00:00-05:00       -0.98       -0.98
2000-01-01 12:05:00-05:00        0.98        0.98
2000-01-01 12:10:00-05:00       -0.98       -0.98

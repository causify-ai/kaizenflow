################################################################################
system_config
################################################################################
dag_config:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',), ('feature1',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap', 'feature1': 'feature1'}, 'mean', {})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  compute_vol:
    in_col_group: ('vwap.ret_0',)
    out_col_group: ('vwap.ret_0.vol',)
    drop_nans: True
    permitted_exceptions: (<class 'ValueError'>,)
  adjust_rets:
    in_col_groups: [('vwap.ret_0',), ('vwap.ret_0.vol',)]
    out_col_group: ()
    transformer_kwargs:
      term1_col: vwap.ret_0
      term2_col: vwap.ret_0.vol
      out_col: vwap.ret_0.vol_adj
      term2_delay: 2
      operation: div
    drop_nans: True
  compress_rets:
<<<<<<< HEAD
    in_col_groups: [('vwap.ret_0.vol_adj',)]
    out_col_group: ()
    col_mapping:
      vwap.ret_0.vol_adj: vwap.ret_0.vol_adj.c
dag_builder_object: nid_prefix=
dag_builder_class: Example1_DagBuilder
system_class: Example1_Time_ForecastSystem
event_loop_object: <_EventLoop running=False closed=True debug=False>
market_data_config:
  data: 
    index=[2000-01-01 09:31:00-05:00, 2000-01-01 10:10:00-05:00]
    columns=start_datetime,end_datetime,timestamp_db,close,asset_id,volume,feature1
    shape=(40, 7)
                                         start_datetime              end_datetime              timestamp_db  close  asset_id  volume  feature1
    2000-01-01 09:31:00-05:00 2000-01-01 09:30:00-05:00 2000-01-01 09:31:00-05:00 2000-01-01 09:31:00-05:00  101.0       101     100       1.0
    2000-01-01 09:32:00-05:00 2000-01-01 09:31:00-05:00 2000-01-01 09:32:00-05:00 2000-01-01 09:32:00-05:00  101.0       101     100       1.0
    2000-01-01 09:33:00-05:00 2000-01-01 09:32:00-05:00 2000-01-01 09:33:00-05:00 2000-01-01 09:33:00-05:00  101.0       101     100       1.0
    ...
    2000-01-01 10:08:00-05:00 2000-01-01 10:07:00-05:00 2000-01-01 10:08:00-05:00 2000-01-01 10:08:00-05:00  100.0       101     100      -1.0
    2000-01-01 10:09:00-05:00 2000-01-01 10:08:00-05:00 2000-01-01 10:09:00-05:00 2000-01-01 10:09:00-05:00  100.0       101     100      -1.0
    2000-01-01 10:10:00-05:00 2000-01-01 10:09:00-05:00 2000-01-01 10:10:00-05:00 2000-01-01 10:10:00-05:00  100.0       101     100      -1.0
  initial_replayed_delay: 5
dag_runner_config:
  real_time_loop_time_out_in_secs: 900
market_object: <market_data.replayed_market_data.ReplayedMarketData object>
dag_object: dag=<dataflow.core.dag.DAG object>
  name=None
  mode=strict
  nodes=[('filter_ath', {'stage': <dataflow.core.nodes.transformers.ColumnTransformer object at 0x>}), ('resample', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compute_ret_0', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compute_vol', {'stage': <dataflow.core.nodes.transformers.SeriesToSeriesTransformer object at 0x>}), ('adjust_rets', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('compress_rets', {'stage': <dataflow.core.nodes.transformers.GroupedColDfToDfTransformer object at 0x>}), ('read_data', {'stage': <dataflow.system.source_nodes.RealTimeDataSource object>})]
  edges=[('filter_ath', 'resample', {'df_in': 'df_out'}), ('resample', 'compute_ret_0', {'df_in': 'df_out'}), ('compute_ret_0', 'compute_vol', {'df_in': 'df_out'}), ('compute_vol', 'adjust_rets', {'df_in': 'df_out'}), ('adjust_rets', 'compress_rets', {'df_in': 'df_out'}), ('read_data', 'filter_ath', {'df_in': 'df_out'})]
  save_node_io=
  profile_execution=False
  dst_dir=None
  force_free_nodes=False
dag_runner_object: <dataflow.system.real_time_dag_runner.RealTimeDagRunner object>
################################################################################
vwap.ret_0.vol_adj.c
################################################################################
Empty DataFrame
Columns: [101]
Index: []
=======
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:35:00-05:00 to 2000-01-01 09:35:00-05:00
      Freq: 5T
      Data columns (total 10 columns):
       #   Column                       Non-Null Count  Dtype  
      ---  ------                       --------------  -----  
       0   (vwap.ret_0.vol_adj.c, 101)  0 non-null      float64
       1   (vwap.ret_0.vol_adj, 101)    0 non-null      float64
       2   (vwap.ret_0.vol, 101)        0 non-null      float64
       3   (close.ret_0, 101)           0 non-null      float64
       4   (twap.ret_0, 101)            0 non-null      float64
       5   (vwap.ret_0, 101)            0 non-null      float64
       6   (close, 101)                 1 non-null      float64
       7   (feature1, 101)              1 non-null      float64
       8   (twap, 101)                  1 non-null      float64
       9   (vwap, 101)                  1 non-null      float64
      dtypes: float64(10)
  read_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (feature1, 101)        5 non-null      float64                         
       2   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       4   (volume, 101)          5 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
payload: None
class: ResultBundle
>>>>>>> master

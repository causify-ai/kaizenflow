# 1/2
DAG:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',), ('feature1',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap', 'feature1': 'feature1'}, 'mean', {})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  compute_vol:
    in_col_group: ('vwap.ret_0',)
    out_col_group: ('vwap.ret_0.vol',)
    drop_nans: True
    permitted_exceptions: (<class 'ValueError'>,)
  adjust_rets:
    in_col_groups: [('vwap.ret_0',), ('vwap.ret_0.vol',)]
    out_col_group: ()
    transformer_kwargs:
      term1_col: vwap.ret_0
      term2_col: vwap.ret_0.vol
      out_col: vwap.ret_0.vol_adj
      term2_delay: 2
      operation: div
    drop_nans: True
  compress_rets:
    in_col_groups: [('vwap.ret_0.vol_adj',)]
    out_col_group: ()
    col_mapping:
      vwap.ret_0.vol_adj: vwap.ret_0.vol_adj.c
meta:
  dag_builder: nid_prefix=
  get_config_template=
    filter_ath:
      col_mode: replace_all
      transformer_kwargs:
        start_time: 09:30:00
        end_time: 16:00:00
    resample:
      in_col_groups: [('close',), ('volume',), ('feature1',)]
      out_col_group: ()
      transformer_kwargs:
        rule: 5T
        resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap', 'feature1': 'feature1'}, 'mean', {})]
        vwap_groups: [('close', 'volume', 'vwap')]
      reindex_like_input: False
      join_output_with_input: False
    compute_ret_0:
      in_col_groups: [('close',), ('vwap',), ('twap',)]
      out_col_group: ()
      transformer_kwargs:
        mode: log_rets
      col_mapping:
        close: close.ret_0
        vwap: vwap.ret_0
        twap: twap.ret_0
    compute_vol:
      in_col_group: ('vwap.ret_0',)
      out_col_group: ('vwap.ret_0.vol',)
      drop_nans: True
      permitted_exceptions: (<class 'ValueError'>,)
    adjust_rets:
      in_col_groups: [('vwap.ret_0',), ('vwap.ret_0.vol',)]
      out_col_group: ()
      transformer_kwargs:
        term1_col: vwap.ret_0
        term2_col: vwap.ret_0.vol
        out_col: vwap.ret_0.vol_adj
        term2_delay: 2
        operation: div
      drop_nans: True
    compress_rets:
      in_col_groups: [('vwap.ret_0.vol_adj',)]
      out_col_group: ()
      col_mapping:
        vwap.ret_0.vol_adj: vwap.ret_0.vol_adj.c
  dag=
    name=None
    mode=strict
    json=
      {
          "directed": true,
          "graph": {},
          "links": [
              {
                  "df_in": "df_out",
                  "source": "filter_ath",
                  "target": "resample"
              },
              {
                  "df_in": "df_out",
                  "source": "resample",
                  "target": "compute_ret_0"
              },
              {
                  "df_in": "df_out",
                  "source": "compute_ret_0",
                  "target": "compute_vol"
              },
              {
                  "df_in": "df_out",
                  "source": "compute_vol",
                  "target": "adjust_rets"
              },
              {
                  "df_in": "df_out",
                  "source": "adjust_rets",
                  "target": "compress_rets"
              }
          ],
          "multigraph": false,
          "nodes": [
              {
                  "id": "filter_ath",
                  "stage": "ColumnTransformer"
              },
              {
                  "id": "resample",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compute_ret_0",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compute_vol",
                  "stage": "SeriesToSeriesTransformer"
              },
              {
                  "id": "adjust_rets",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compress_rets",
                  "stage": "GroupedColDfToDfTransformer"
              }
          ]
      }
  dag_runner: <function get_dag_runner>
  asset_id_col_name: asset_id
  asset_ids: ['AAPL']
  start_timestamp_with_lookback: 2019-12-22 00:00:00+00:00
  start_timestamp: 2020-01-01 00:00:00+00:00
  end_timestamp: 2020-01-31 00:00:00+00:00
# 2/2
DAG:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',), ('feature1',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap', 'feature1': 'feature1'}, 'mean', {})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  compute_vol:
    in_col_group: ('vwap.ret_0',)
    out_col_group: ('vwap.ret_0.vol',)
    drop_nans: True
    permitted_exceptions: (<class 'ValueError'>,)
  adjust_rets:
    in_col_groups: [('vwap.ret_0',), ('vwap.ret_0.vol',)]
    out_col_group: ()
    transformer_kwargs:
      term1_col: vwap.ret_0
      term2_col: vwap.ret_0.vol
      out_col: vwap.ret_0.vol_adj
      term2_delay: 2
      operation: div
    drop_nans: True
  compress_rets:
    in_col_groups: [('vwap.ret_0.vol_adj',)]
    out_col_group: ()
    col_mapping:
      vwap.ret_0.vol_adj: vwap.ret_0.vol_adj.c
meta:
  dag_builder: nid_prefix=
  get_config_template=
    filter_ath:
      col_mode: replace_all
      transformer_kwargs:
        start_time: 09:30:00
        end_time: 16:00:00
    resample:
      in_col_groups: [('close',), ('volume',), ('feature1',)]
      out_col_group: ()
      transformer_kwargs:
        rule: 5T
        resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap', 'feature1': 'feature1'}, 'mean', {})]
        vwap_groups: [('close', 'volume', 'vwap')]
      reindex_like_input: False
      join_output_with_input: False
    compute_ret_0:
      in_col_groups: [('close',), ('vwap',), ('twap',)]
      out_col_group: ()
      transformer_kwargs:
        mode: log_rets
      col_mapping:
        close: close.ret_0
        vwap: vwap.ret_0
        twap: twap.ret_0
    compute_vol:
      in_col_group: ('vwap.ret_0',)
      out_col_group: ('vwap.ret_0.vol',)
      drop_nans: True
      permitted_exceptions: (<class 'ValueError'>,)
    adjust_rets:
      in_col_groups: [('vwap.ret_0',), ('vwap.ret_0.vol',)]
      out_col_group: ()
      transformer_kwargs:
        term1_col: vwap.ret_0
        term2_col: vwap.ret_0.vol
        out_col: vwap.ret_0.vol_adj
        term2_delay: 2
        operation: div
      drop_nans: True
    compress_rets:
      in_col_groups: [('vwap.ret_0.vol_adj',)]
      out_col_group: ()
      col_mapping:
        vwap.ret_0.vol_adj: vwap.ret_0.vol_adj.c
  dag=
    name=None
    mode=strict
    json=
      {
          "directed": true,
          "graph": {},
          "links": [
              {
                  "df_in": "df_out",
                  "source": "filter_ath",
                  "target": "resample"
              },
              {
                  "df_in": "df_out",
                  "source": "resample",
                  "target": "compute_ret_0"
              },
              {
                  "df_in": "df_out",
                  "source": "compute_ret_0",
                  "target": "compute_vol"
              },
              {
                  "df_in": "df_out",
                  "source": "compute_vol",
                  "target": "adjust_rets"
              },
              {
                  "df_in": "df_out",
                  "source": "adjust_rets",
                  "target": "compress_rets"
              }
          ],
          "multigraph": false,
          "nodes": [
              {
                  "id": "filter_ath",
                  "stage": "ColumnTransformer"
              },
              {
                  "id": "resample",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compute_ret_0",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compute_vol",
                  "stage": "SeriesToSeriesTransformer"
              },
              {
                  "id": "adjust_rets",
                  "stage": "GroupedColDfToDfTransformer"
              },
              {
                  "id": "compress_rets",
                  "stage": "GroupedColDfToDfTransformer"
              }
          ]
      }
  dag_runner: <function get_dag_runner>
  asset_id_col_name: asset_id
  asset_ids: ['AAPL']
  start_timestamp_with_lookback: 2020-01-22 00:00:00+00:00
  start_timestamp: 2020-02-01 00:00:00+00:00
  end_timestamp: 2020-02-29 00:00:00+00:00

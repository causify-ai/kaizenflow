events_as_str=
num_it=1 current_time='2010-01-04 09:30:00'
num_it=2 current_time='2010-01-04 09:35:00'
num_it=3 current_time='2010-01-04 09:40:00'
result_bundles=
config:
  get_data:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      timedelta: 0 days 00:05:00
      asset_id_col: asset_id
      multiindex_output: True
  process_data:
    func: <function _NaivePipeline.get_config_template.<locals>._process_data>
  process_forecasts:
    prediction_col: price
    volatility_col: price
    process_forecasts_config: {'order_type': 'price@twap', 'order_duration': 1, 'ath_start_time': datetime.time(9, 30), 'trading_start_time': datetime.time(9, 35), 'ath_end_time': datetime.time(16, 0), 'trading_end_time': datetime.time(15, 55), 'execution_mode': 'real_time'}
    portfolio: # historical holdings=
    asset_id                    1000       -1   
    2000-01-01 09:35:00-05:00   0.00  1000000.00
    2000-01-01 09:35:01-05:00   0.00  1000000.00
    2000-01-01 09:40:01-05:00  99.97   900034.39
    2000-01-01 09:45:01-05:00  99.98   900023.34
    # historical holdings marked to market=
    asset_id                       1000       -1   
    2000-01-01 09:35:00-05:00      0.00  1000000.00
    2000-01-01 09:35:01-05:00      0.00  1000000.00
    2000-01-01 09:40:01-05:00  99988.95   900034.39
    2000-01-01 09:45:01-05:00  99971.72   900023.34
    # historical flows=
    asset_id                       1000
    2000-01-01 09:35:01-05:00       NaN
    2000-01-01 09:40:01-05:00 -99965.61
    2000-01-01 09:45:01-05:00    -11.05
    # historical pnl=
    asset_id                    1000
    2000-01-01 09:35:00-05:00    NaN
    2000-01-01 09:35:01-05:00   0.00
    2000-01-01 09:40:01-05:00  23.34
    2000-01-01 09:45:01-05:00 -28.28
    # historical statistics=
                                 pnl  gross_volume  net_volume       gmv       nmv        cash  net_wealth  leverage
    2000-01-01 09:35:00-05:00    NaN          0.00        0.00      0.00      0.00  1000000.00    1.00e+06       0.0
    2000-01-01 09:35:01-05:00   0.00          0.00        0.00      0.00      0.00  1000000.00    1.00e+06       0.0
    2000-01-01 09:40:01-05:00  23.34      99965.61    99965.61  99988.95  99988.95   900034.39    1.00e+06       0.1
    2000-01-01 09:45:01-05:00 -28.28         11.05       11.05  99971.72  99971.72   900023.34    1.00e+06       0.1
result_nid: process_forecasts
method: predict
result_df:                                  price            start_datetime  \
                                  1000                      1000   
end_datetime                                                       
2000-01-01 09:31:00-05:00   999.874540 2000-01-01 09:30:00-05:00   
2000-01-01 09:32:00-05:00  1000.325254 2000-01-01 09:31:00-05:00   
2000-01-01 09:33:00-05:00  1000.557248 2000-01-01 09:32:00-05:00   
2000-01-01 09:34:00-05:00  1000.655907 2000-01-01 09:33:00-05:00   
2000-01-01 09:35:00-05:00  1000.311925 2000-01-01 09:34:00-05:00   

                                       timestamp_db          vol  
                                               1000         1000  
end_datetime                                                      
2000-01-01 09:31:00-05:00 2000-01-01 09:31:00-05:00   999.874540  
2000-01-01 09:32:00-05:00 2000-01-01 09:32:00-05:00  1000.325254  
2000-01-01 09:33:00-05:00 2000-01-01 09:33:00-05:00  1000.557248  
2000-01-01 09:34:00-05:00 2000-01-01 09:34:00-05:00  1000.655907  
2000-01-01 09:35:00-05:00 2000-01-01 09:35:00-05:00  1000.311925  
column_to_tags: None
info:
  get_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  process_data:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
payload: None
class: ResultBundle
config:
  get_data:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      timedelta: 0 days 00:05:00
      asset_id_col: asset_id
      multiindex_output: True
  process_data:
    func: <function _NaivePipeline.get_config_template.<locals>._process_data>
  process_forecasts:
    prediction_col: price
    volatility_col: price
    process_forecasts_config: {'order_type': 'price@twap', 'order_duration': 1, 'ath_start_time': datetime.time(9, 30), 'trading_start_time': datetime.time(9, 35), 'ath_end_time': datetime.time(16, 0), 'trading_end_time': datetime.time(15, 55), 'execution_mode': 'real_time'}
    portfolio: # historical holdings=
    asset_id                    1000       -1   
    2000-01-01 09:35:00-05:00   0.00  1000000.00
    2000-01-01 09:35:01-05:00   0.00  1000000.00
    2000-01-01 09:40:01-05:00  99.97   900034.39
    2000-01-01 09:45:01-05:00  99.98   900023.34
    # historical holdings marked to market=
    asset_id                       1000       -1   
    2000-01-01 09:35:00-05:00      0.00  1000000.00
    2000-01-01 09:35:01-05:00      0.00  1000000.00
    2000-01-01 09:40:01-05:00  99988.95   900034.39
    2000-01-01 09:45:01-05:00  99971.72   900023.34
    # historical flows=
    asset_id                       1000
    2000-01-01 09:35:01-05:00       NaN
    2000-01-01 09:40:01-05:00 -99965.61
    2000-01-01 09:45:01-05:00    -11.05
    # historical pnl=
    asset_id                    1000
    2000-01-01 09:35:00-05:00    NaN
    2000-01-01 09:35:01-05:00   0.00
    2000-01-01 09:40:01-05:00  23.34
    2000-01-01 09:45:01-05:00 -28.28
    # historical statistics=
                                 pnl  gross_volume  net_volume       gmv       nmv        cash  net_wealth  leverage
    2000-01-01 09:35:00-05:00    NaN          0.00        0.00      0.00      0.00  1000000.00    1.00e+06       0.0
    2000-01-01 09:35:01-05:00   0.00          0.00        0.00      0.00      0.00  1000000.00    1.00e+06       0.0
    2000-01-01 09:40:01-05:00  23.34      99965.61    99965.61  99988.95  99988.95   900034.39    1.00e+06       0.1
    2000-01-01 09:45:01-05:00 -28.28         11.05       11.05  99971.72  99971.72   900023.34    1.00e+06       0.1
result_nid: process_forecasts
method: predict
result_df:                                  price            start_datetime  \
                                  1000                      1000   
end_datetime                                                       
2000-01-01 09:36:00-05:00   999.967920 2000-01-01 09:35:00-05:00   
2000-01-01 09:37:00-05:00   999.526004 2000-01-01 09:36:00-05:00   
2000-01-01 09:38:00-05:00   999.892180 2000-01-01 09:37:00-05:00   
2000-01-01 09:39:00-05:00   999.993295 2000-01-01 09:38:00-05:00   
2000-01-01 09:40:00-05:00  1000.201367 2000-01-01 09:39:00-05:00   

                                       timestamp_db          vol  
                                               1000         1000  
end_datetime                                                      
2000-01-01 09:36:00-05:00 2000-01-01 09:36:00-05:00   999.967920  
2000-01-01 09:37:00-05:00 2000-01-01 09:37:00-05:00   999.526004  
2000-01-01 09:38:00-05:00 2000-01-01 09:38:00-05:00   999.892180  
2000-01-01 09:39:00-05:00 2000-01-01 09:39:00-05:00   999.993295  
2000-01-01 09:40:00-05:00 2000-01-01 09:40:00-05:00  1000.201367  
column_to_tags: None
info:
  get_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  process_data:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
payload: None
class: ResultBundle
config:
  get_data:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      timedelta: 0 days 00:05:00
      asset_id_col: asset_id
      multiindex_output: True
  process_data:
    func: <function _NaivePipeline.get_config_template.<locals>._process_data>
  process_forecasts:
    prediction_col: price
    volatility_col: price
    process_forecasts_config: {'order_type': 'price@twap', 'order_duration': 1, 'ath_start_time': datetime.time(9, 30), 'trading_start_time': datetime.time(9, 35), 'ath_end_time': datetime.time(16, 0), 'trading_end_time': datetime.time(15, 55), 'execution_mode': 'real_time'}
    portfolio: # historical holdings=
    asset_id                    1000       -1   
    2000-01-01 09:35:00-05:00   0.00  1000000.00
    2000-01-01 09:35:01-05:00   0.00  1000000.00
    2000-01-01 09:40:01-05:00  99.97   900034.39
    2000-01-01 09:45:01-05:00  99.98   900023.34
    # historical holdings marked to market=
    asset_id                       1000       -1   
    2000-01-01 09:35:00-05:00      0.00  1000000.00
    2000-01-01 09:35:01-05:00      0.00  1000000.00
    2000-01-01 09:40:01-05:00  99988.95   900034.39
    2000-01-01 09:45:01-05:00  99971.72   900023.34
    # historical flows=
    asset_id                       1000
    2000-01-01 09:35:01-05:00       NaN
    2000-01-01 09:40:01-05:00 -99965.61
    2000-01-01 09:45:01-05:00    -11.05
    # historical pnl=
    asset_id                    1000
    2000-01-01 09:35:00-05:00    NaN
    2000-01-01 09:35:01-05:00   0.00
    2000-01-01 09:40:01-05:00  23.34
    2000-01-01 09:45:01-05:00 -28.28
    # historical statistics=
                                 pnl  gross_volume  net_volume       gmv       nmv        cash  net_wealth  leverage
    2000-01-01 09:35:00-05:00    NaN          0.00        0.00      0.00      0.00  1000000.00    1.00e+06       0.0
    2000-01-01 09:35:01-05:00   0.00          0.00        0.00      0.00      0.00  1000000.00    1.00e+06       0.0
    2000-01-01 09:40:01-05:00  23.34      99965.61    99965.61  99988.95  99988.95   900034.39    1.00e+06       0.1
    2000-01-01 09:45:01-05:00 -28.28         11.05       11.05  99971.72  99971.72   900023.34    1.00e+06       0.1
result_nid: process_forecasts
method: predict
result_df:                                  price            start_datetime  \
                                  1000                      1000   
end_datetime                                                       
2000-01-01 09:41:00-05:00   999.721952 2000-01-01 09:40:00-05:00   
2000-01-01 09:42:00-05:00  1000.191862 2000-01-01 09:41:00-05:00   
2000-01-01 09:43:00-05:00  1000.524304 2000-01-01 09:42:00-05:00   
2000-01-01 09:44:00-05:00  1000.236643 2000-01-01 09:43:00-05:00   
2000-01-01 09:45:00-05:00   999.918468 2000-01-01 09:44:00-05:00   

                                       timestamp_db          vol  
                                               1000         1000  
end_datetime                                                      
2000-01-01 09:41:00-05:00 2000-01-01 09:41:00-05:00   999.721952  
2000-01-01 09:42:00-05:00 2000-01-01 09:42:00-05:00  1000.191862  
2000-01-01 09:43:00-05:00 2000-01-01 09:43:00-05:00  1000.524304  
2000-01-01 09:44:00-05:00 2000-01-01 09:44:00-05:00  1000.236643  
2000-01-01 09:45:00-05:00 2000-01-01 09:45:00-05:00   999.918468  
column_to_tags: None
info:
  get_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  process_data:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Data columns (total 4 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (price, 1000)           5 non-null      float64                         
       1   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       3   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
payload: None
class: ResultBundle
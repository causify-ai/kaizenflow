events_as_str=
num_it=1 current_time='2010-01-04 09:30:00'
num_it=2 current_time='2010-01-04 09:35:00'
num_it=3 current_time='2010-01-04 09:40:00'
result_bundles=
config:
  get_data:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data_interface: <market_data.market_data_interface.ReplayedTimeMarketDataInterface object>
      period: last_5mins
      asset_id_col: asset_id
      multiindex_output: True
  process_data:
    func: <function _NaivePipeline.get_config_template.<locals>._process_data>
  process_forecasts:
    prediction_col: price
    execution_mode: real_time
    process_forecasts_config: {'market_data_interface': <market_data.market_data_interface.ReplayedTimeMarketDataInterface object>, 'portfolio': <oms.portfolio.SimulatedPortfolio object>, 'order_type': 'price@twap', 'ath_start_time': datetime.time(9, 30), 'trading_start_time': datetime.time(9, 30), 'ath_end_time': datetime.time(16, 40), 'trading_end_time': datetime.time(16, 40)}
result_nid: process_forecasts
method: predict
result_df:                           asset_id      price            start_datetime  \
                              1000       1000                      1000   
end_datetime                                                              
2000-01-01 09:31:00-05:00     1000  999.87454 2000-01-01 09:30:00-05:00   

                                       timestamp_db        vol  
                                               1000       1000  
end_datetime                                                    
2000-01-01 09:31:00-05:00 2000-01-01 09:31:00-05:00  999.87454  
column_to_tags: None
info:
  get_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:31:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        1 non-null      int64                           
       1   (price, 1000)           1 non-null      float64                         
       2   (start_datetime, 1000)  1 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    1 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             1 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  process_data:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:31:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        1 non-null      int64                           
       1   (price, 1000)           1 non-null      float64                         
       2   (start_datetime, 1000)  1 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    1 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             1 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:31:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        1 non-null      int64                           
       1   (price, 1000)           1 non-null      float64                         
       2   (start_datetime, 1000)  1 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    1 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             1 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
payload: None
class: ResultBundle
config:
  get_data:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data_interface: <market_data.market_data_interface.ReplayedTimeMarketDataInterface object>
      period: last_5mins
      asset_id_col: asset_id
      multiindex_output: True
  process_data:
    func: <function _NaivePipeline.get_config_template.<locals>._process_data>
  process_forecasts:
    prediction_col: price
    execution_mode: real_time
    process_forecasts_config: {'market_data_interface': <market_data.market_data_interface.ReplayedTimeMarketDataInterface object>, 'portfolio': <oms.portfolio.SimulatedPortfolio object>, 'order_type': 'price@twap', 'ath_start_time': datetime.time(9, 30), 'trading_start_time': datetime.time(9, 30), 'ath_end_time': datetime.time(16, 40), 'trading_end_time': datetime.time(16, 40)}
result_nid: process_forecasts
method: predict
result_df:                           asset_id        price            start_datetime  \
                              1000         1000                      1000   
end_datetime                                                                
2000-01-01 09:31:00-05:00     1000   999.874540 2000-01-01 09:30:00-05:00   
2000-01-01 09:32:00-05:00     1000  1000.325254 2000-01-01 09:31:00-05:00   
2000-01-01 09:33:00-05:00     1000  1000.557248 2000-01-01 09:32:00-05:00   
2000-01-01 09:34:00-05:00     1000  1000.655907 2000-01-01 09:33:00-05:00   
2000-01-01 09:35:00-05:00     1000  1000.311925 2000-01-01 09:34:00-05:00   

                                       timestamp_db          vol  
                                               1000         1000  
end_datetime                                                      
2000-01-01 09:31:00-05:00 2000-01-01 09:31:00-05:00   999.874540  
2000-01-01 09:32:00-05:00 2000-01-01 09:32:00-05:00  1000.325254  
2000-01-01 09:33:00-05:00 2000-01-01 09:33:00-05:00  1000.557248  
2000-01-01 09:34:00-05:00 2000-01-01 09:34:00-05:00  1000.655907  
2000-01-01 09:35:00-05:00 2000-01-01 09:35:00-05:00  1000.311925  
column_to_tags: None
info:
  get_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        5 non-null      int64                           
       1   (price, 1000)           5 non-null      float64                         
       2   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  process_data:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        5 non-null      int64                           
       1   (price, 1000)           5 non-null      float64                         
       2   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        5 non-null      int64                           
       1   (price, 1000)           5 non-null      float64                         
       2   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
payload: None
class: ResultBundle
config:
  get_data:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data_interface: <market_data.market_data_interface.ReplayedTimeMarketDataInterface object>
      period: last_5mins
      asset_id_col: asset_id
      multiindex_output: True
  process_data:
    func: <function _NaivePipeline.get_config_template.<locals>._process_data>
  process_forecasts:
    prediction_col: price
    execution_mode: real_time
    process_forecasts_config: {'market_data_interface': <market_data.market_data_interface.ReplayedTimeMarketDataInterface object>, 'portfolio': <oms.portfolio.SimulatedPortfolio object>, 'order_type': 'price@twap', 'ath_start_time': datetime.time(9, 30), 'trading_start_time': datetime.time(9, 30), 'ath_end_time': datetime.time(16, 40), 'trading_end_time': datetime.time(16, 40)}
result_nid: process_forecasts
method: predict
result_df:                           asset_id        price            start_datetime  \
                              1000         1000                      1000   
end_datetime                                                                
2000-01-01 09:36:00-05:00     1000   999.967920 2000-01-01 09:35:00-05:00   
2000-01-01 09:37:00-05:00     1000   999.526004 2000-01-01 09:36:00-05:00   
2000-01-01 09:38:00-05:00     1000   999.892180 2000-01-01 09:37:00-05:00   
2000-01-01 09:39:00-05:00     1000   999.993295 2000-01-01 09:38:00-05:00   
2000-01-01 09:40:00-05:00     1000  1000.201367 2000-01-01 09:39:00-05:00   

                                       timestamp_db          vol  
                                               1000         1000  
end_datetime                                                      
2000-01-01 09:36:00-05:00 2000-01-01 09:36:00-05:00   999.967920  
2000-01-01 09:37:00-05:00 2000-01-01 09:37:00-05:00   999.526004  
2000-01-01 09:38:00-05:00 2000-01-01 09:38:00-05:00   999.892180  
2000-01-01 09:39:00-05:00 2000-01-01 09:39:00-05:00   999.993295  
2000-01-01 09:40:00-05:00 2000-01-01 09:40:00-05:00  1000.201367  
column_to_tags: None
info:
  get_data:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        5 non-null      int64                           
       1   (price, 1000)           5 non-null      float64                         
       2   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  process_data:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        5 non-null      int64                           
       1   (price, 1000)           5 non-null      float64                         
       2   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 5 columns):
       #   Column                  Non-Null Count  Dtype                           
      ---  ------                  --------------  -----                           
       0   (asset_id, 1000)        5 non-null      int64                           
       1   (price, 1000)           5 non-null      float64                         
       2   (start_datetime, 1000)  5 non-null      datetime64[ns, America/New_York]
       3   (timestamp_db, 1000)    5 non-null      datetime64[ns, America/New_York]
       4   (vol, 1000)             5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
payload: None
class: ResultBundle
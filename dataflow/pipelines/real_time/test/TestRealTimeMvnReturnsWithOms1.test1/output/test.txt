events_as_str=
num_it=1 current_time='2010-01-04 09:30:00'
num_it=2 current_time='2010-01-04 09:35:00'
num_it=3 current_time='2010-01-04 09:40:00'
result_bundles=
[config:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap'}, 'mean', {}), ({'volume': 'volume'}, 'sum', {'min_count': 1})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  load_prices:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      timedelta: 0 days 00:05:00
      asset_id_col: asset_id
      multiindex_output: True
  process_forecasts:
    prediction_col: close
    volatility_col: close
    portfolio: # historical holdings=
    asset_id                        101       -1  
    2000-01-03 09:30:00-05:00      0.00  1000000.0
    2000-01-03 09:30:01-05:00      0.00  1000000.0
    2000-01-03 09:35:01-05:00      0.00  1000000.0
    2000-01-03 09:40:01-05:00  99934.44   900020.9
    # historical holdings marked to market=
    asset_id                        101       -1  
    2000-01-03 09:30:00-05:00      0.00  1000000.0
    2000-01-03 09:30:01-05:00      0.00  1000000.0
    2000-01-03 09:35:01-05:00      0.00  1000000.0
    2000-01-03 09:40:01-05:00  99946.63   900020.9
    # historical flows=
    asset_id                       101
    2000-01-03 09:30:01-05:00      NaN
    2000-01-03 09:35:01-05:00      NaN
    2000-01-03 09:40:01-05:00 -99979.1
    # historical pnl=
    asset_id                     101
    2000-01-03 09:30:00-05:00    NaN
    2000-01-03 09:30:01-05:00   0.00
    2000-01-03 09:35:01-05:00   0.00
    2000-01-03 09:40:01-05:00 -32.46
    # historical statistics=
                                 pnl  gross_volume  net_volume       gmv       nmv       cash  net_wealth  leverage
    2000-01-03 09:30:00-05:00    NaN           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:30:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:35:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:40:01-05:00 -32.46       99979.1     99979.1  99946.63  99946.63   900020.9   999967.54       0.1
    process_forecasts_config:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      order_type: price@twap
      order_duration: 5
      ath_start_time: 09:30:00
      trading_start_time: 09:30:00
      ath_end_time: 16:40:00
      trading_end_time: 16:40:00
      execution_mode: real_time
      log_dir: None
    evaluate_forecasts_config: None
result_nid: process_forecasts
method: predict
result_df:                           close.ret_0 twap.ret_0 vwap.ret_0 close twap volume  \
                                  101        101        101   101  101    101   
end_datetime                                                                    
2000-01-03 09:30:00-05:00         NaN        NaN        NaN   NaN  NaN    NaN   

                          vwap  
                           101  
end_datetime                    
2000-01-03 09:30:00-05:00  NaN  
column_to_tags: None
info:
  filter_weekends:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:30:00-05:00 to 2000-01-03 09:30:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           1 non-null      float64                         
       1   (start_datetime, 101)  1 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    1 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          1 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  filter_ath:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:30:00-05:00 to 2000-01-03 09:30:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           0 non-null      float64                         
       1   (start_datetime, 101)  0 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    0 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  resample:
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:30:00-05:00 to 2000-01-03 09:30:00-05:00
      Freq: 5T
      Data columns (total 4 columns):
       #   Column         Non-Null Count  Dtype  
      ---  ------         --------------  -----  
       0   (close, 101)   0 non-null      float64
       1   (twap, 101)    0 non-null      float64
       2   (volume, 101)  0 non-null      float64
       3   (vwap, 101)    0 non-null      float64
      dtypes: float64(4)
  compute_ret_0:
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:30:00-05:00 to 2000-01-03 09:30:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column              Non-Null Count  Dtype  
      ---  ------              --------------  -----  
       0   (close.ret_0, 101)  0 non-null      float64
       1   (twap.ret_0, 101)   0 non-null      float64
       2   (vwap.ret_0, 101)   0 non-null      float64
       3   (close, 101)        0 non-null      float64
       4   (twap, 101)         0 non-null      float64
       5   (volume, 101)       0 non-null      float64
       6   (vwap, 101)         0 non-null      float64
      dtypes: float64(7)
  load_prices:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:30:00-05:00 to 2000-01-03 09:30:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           1 non-null      float64                         
       1   (start_datetime, 101)  1 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    1 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          1 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(1), int64(1)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:30:00-05:00 to 2000-01-03 09:30:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column              Non-Null Count  Dtype  
      ---  ------              --------------  -----  
       0   (close.ret_0, 101)  0 non-null      float64
       1   (twap.ret_0, 101)   0 non-null      float64
       2   (vwap.ret_0, 101)   0 non-null      float64
       3   (close, 101)        0 non-null      float64
       4   (twap, 101)         0 non-null      float64
       5   (volume, 101)       0 non-null      float64
       6   (vwap, 101)         0 non-null      float64
      dtypes: float64(7)
payload: None
class: ResultBundle, config:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap'}, 'mean', {}), ({'volume': 'volume'}, 'sum', {'min_count': 1})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  load_prices:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      timedelta: 0 days 00:05:00
      asset_id_col: asset_id
      multiindex_output: True
  process_forecasts:
    prediction_col: close
    volatility_col: close
    portfolio: # historical holdings=
    asset_id                        101       -1  
    2000-01-03 09:30:00-05:00      0.00  1000000.0
    2000-01-03 09:30:01-05:00      0.00  1000000.0
    2000-01-03 09:35:01-05:00      0.00  1000000.0
    2000-01-03 09:40:01-05:00  99934.44   900020.9
    # historical holdings marked to market=
    asset_id                        101       -1  
    2000-01-03 09:30:00-05:00      0.00  1000000.0
    2000-01-03 09:30:01-05:00      0.00  1000000.0
    2000-01-03 09:35:01-05:00      0.00  1000000.0
    2000-01-03 09:40:01-05:00  99946.63   900020.9
    # historical flows=
    asset_id                       101
    2000-01-03 09:30:01-05:00      NaN
    2000-01-03 09:35:01-05:00      NaN
    2000-01-03 09:40:01-05:00 -99979.1
    # historical pnl=
    asset_id                     101
    2000-01-03 09:30:00-05:00    NaN
    2000-01-03 09:30:01-05:00   0.00
    2000-01-03 09:35:01-05:00   0.00
    2000-01-03 09:40:01-05:00 -32.46
    # historical statistics=
                                 pnl  gross_volume  net_volume       gmv       nmv       cash  net_wealth  leverage
    2000-01-03 09:30:00-05:00    NaN           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:30:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:35:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:40:01-05:00 -32.46       99979.1     99979.1  99946.63  99946.63   900020.9   999967.54       0.1
    process_forecasts_config:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      order_type: price@twap
      order_duration: 5
      ath_start_time: 09:30:00
      trading_start_time: 09:30:00
      ath_end_time: 16:40:00
      trading_end_time: 16:40:00
      execution_mode: real_time
      log_dir: None
    evaluate_forecasts_config: None
result_nid: process_forecasts
method: predict
result_df:                           close.ret_0 twap.ret_0 vwap.ret_0     close  \
                                  101        101        101       101   
end_datetime                                                            
2000-01-03 09:35:00-05:00         NaN        NaN        NaN  1.000656   

                               twap volume      vwap  
                                101    101       101  
end_datetime                                          
2000-01-03 09:35:00-05:00  1.000198  500.0  1.000198  
column_to_tags: None
info:
  filter_weekends:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-03 09:31:00-05:00 to 2000-01-03 09:35:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  filter_ath:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-03 09:31:00-05:00 to 2000-01-03 09:35:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  resample:
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:35:00-05:00 to 2000-01-03 09:35:00-05:00
      Freq: 5T
      Data columns (total 4 columns):
       #   Column         Non-Null Count  Dtype  
      ---  ------         --------------  -----  
       0   (close, 101)   1 non-null      float64
       1   (twap, 101)    1 non-null      float64
       2   (volume, 101)  1 non-null      float64
       3   (vwap, 101)    1 non-null      float64
      dtypes: float64(4)
  compute_ret_0:
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:35:00-05:00 to 2000-01-03 09:35:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column              Non-Null Count  Dtype  
      ---  ------              --------------  -----  
       0   (close.ret_0, 101)  0 non-null      float64
       1   (twap.ret_0, 101)   0 non-null      float64
       2   (vwap.ret_0, 101)   0 non-null      float64
       3   (close, 101)        1 non-null      float64
       4   (twap, 101)         1 non-null      float64
       5   (volume, 101)       1 non-null      float64
       6   (vwap, 101)         1 non-null      float64
      dtypes: float64(7)
  load_prices:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-03 09:31:00-05:00 to 2000-01-03 09:35:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          5 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(1), int64(1)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:35:00-05:00 to 2000-01-03 09:35:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column              Non-Null Count  Dtype  
      ---  ------              --------------  -----  
       0   (close.ret_0, 101)  0 non-null      float64
       1   (twap.ret_0, 101)   0 non-null      float64
       2   (vwap.ret_0, 101)   0 non-null      float64
       3   (close, 101)        1 non-null      float64
       4   (twap, 101)         1 non-null      float64
       5   (volume, 101)       1 non-null      float64
       6   (vwap, 101)         1 non-null      float64
      dtypes: float64(7)
payload: None
class: ResultBundle, config:
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample:
    in_col_groups: [('close',), ('volume',)]
    out_col_group: ()
    transformer_kwargs:
      rule: 5T
      resampling_groups: [({'close': 'close'}, 'last', {}), ({'close': 'twap'}, 'mean', {}), ({'volume': 'volume'}, 'sum', {'min_count': 1})]
      vwap_groups: [('close', 'volume', 'vwap')]
    reindex_like_input: False
    join_output_with_input: False
  compute_ret_0:
    in_col_groups: [('close',), ('vwap',), ('twap',)]
    out_col_group: ()
    transformer_kwargs:
      mode: log_rets
    col_mapping:
      close: close.ret_0
      vwap: vwap.ret_0
      twap: twap.ret_0
  load_prices:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      timedelta: 0 days 00:05:00
      asset_id_col: asset_id
      multiindex_output: True
  process_forecasts:
    prediction_col: close
    volatility_col: close
    portfolio: # historical holdings=
    asset_id                        101       -1  
    2000-01-03 09:30:00-05:00      0.00  1000000.0
    2000-01-03 09:30:01-05:00      0.00  1000000.0
    2000-01-03 09:35:01-05:00      0.00  1000000.0
    2000-01-03 09:40:01-05:00  99934.44   900020.9
    # historical holdings marked to market=
    asset_id                        101       -1  
    2000-01-03 09:30:00-05:00      0.00  1000000.0
    2000-01-03 09:30:01-05:00      0.00  1000000.0
    2000-01-03 09:35:01-05:00      0.00  1000000.0
    2000-01-03 09:40:01-05:00  99946.63   900020.9
    # historical flows=
    asset_id                       101
    2000-01-03 09:30:01-05:00      NaN
    2000-01-03 09:35:01-05:00      NaN
    2000-01-03 09:40:01-05:00 -99979.1
    # historical pnl=
    asset_id                     101
    2000-01-03 09:30:00-05:00    NaN
    2000-01-03 09:30:01-05:00   0.00
    2000-01-03 09:35:01-05:00   0.00
    2000-01-03 09:40:01-05:00 -32.46
    # historical statistics=
                                 pnl  gross_volume  net_volume       gmv       nmv       cash  net_wealth  leverage
    2000-01-03 09:30:00-05:00    NaN           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:30:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:35:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
    2000-01-03 09:40:01-05:00 -32.46       99979.1     99979.1  99946.63  99946.63   900020.9   999967.54       0.1
    process_forecasts_config:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      order_type: price@twap
      order_duration: 5
      ath_start_time: 09:30:00
      trading_start_time: 09:30:00
      ath_end_time: 16:40:00
      trading_end_time: 16:40:00
      execution_mode: real_time
      log_dir: None
    evaluate_forecasts_config: None
result_nid: process_forecasts
method: predict
result_df:                           close.ret_0 twap.ret_0 vwap.ret_0     close  \
                                  101        101        101       101   
end_datetime                                                            
2000-01-03 09:40:00-05:00         NaN        NaN        NaN  1.000122   

                               twap volume      vwap  
                                101    101       101  
end_datetime                                          
2000-01-03 09:40:00-05:00  1.000447  500.0  1.000447  
column_to_tags: None
info:
  filter_weekends:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-03 09:36:00-05:00 to 2000-01-03 09:40:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  filter_ath:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-03 09:36:00-05:00 to 2000-01-03 09:40:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          5 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(2)
  resample:
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:40:00-05:00 to 2000-01-03 09:40:00-05:00
      Freq: 5T
      Data columns (total 4 columns):
       #   Column         Non-Null Count  Dtype  
      ---  ------         --------------  -----  
       0   (close, 101)   1 non-null      float64
       1   (twap, 101)    1 non-null      float64
       2   (volume, 101)  1 non-null      float64
       3   (vwap, 101)    1 non-null      float64
      dtypes: float64(4)
  compute_ret_0:
    predict:
      func_info: OrderedDict()
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:40:00-05:00 to 2000-01-03 09:40:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column              Non-Null Count  Dtype  
      ---  ------              --------------  -----  
       0   (close.ret_0, 101)  0 non-null      float64
       1   (twap.ret_0, 101)   0 non-null      float64
       2   (vwap.ret_0, 101)   0 non-null      float64
       3   (close, 101)        1 non-null      float64
       4   (twap, 101)         1 non-null      float64
       5   (volume, 101)       1 non-null      float64
       6   (vwap, 101)         1 non-null      float64
      dtypes: float64(7)
  load_prices:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-03 09:36:00-05:00 to 2000-01-03 09:40:00-05:00
      Data columns (total 4 columns):
       #   Column                 Non-Null Count  Dtype                           
      ---  ------                 --------------  -----                           
       0   (close, 101)           5 non-null      float64                         
       1   (start_datetime, 101)  5 non-null      datetime64[ns, America/New_York]
       2   (timestamp_db, 101)    5 non-null      datetime64[ns, America/New_York]
       3   (volume, 101)          5 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(1), int64(1)
  process_forecasts:
    predict:
      df_out_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-03 09:40:00-05:00 to 2000-01-03 09:40:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column              Non-Null Count  Dtype  
      ---  ------              --------------  -----  
       0   (close.ret_0, 101)  0 non-null      float64
       1   (twap.ret_0, 101)   0 non-null      float64
       2   (vwap.ret_0, 101)   0 non-null      float64
       3   (close, 101)        1 non-null      float64
       4   (twap, 101)         1 non-null      float64
       5   (volume, 101)       1 non-null      float64
       6   (vwap, 101)         1 non-null      float64
      dtypes: float64(7)
payload: None
class: ResultBundle]
None
portfolio=
# historical holdings=
asset_id                        101       -1  
2000-01-03 09:30:00-05:00      0.00  1000000.0
2000-01-03 09:30:01-05:00      0.00  1000000.0
2000-01-03 09:35:01-05:00      0.00  1000000.0
2000-01-03 09:40:01-05:00  99934.44   900020.9
# historical holdings marked to market=
asset_id                        101       -1  
2000-01-03 09:30:00-05:00      0.00  1000000.0
2000-01-03 09:30:01-05:00      0.00  1000000.0
2000-01-03 09:35:01-05:00      0.00  1000000.0
2000-01-03 09:40:01-05:00  99946.63   900020.9
# historical flows=
asset_id                       101
2000-01-03 09:30:01-05:00      NaN
2000-01-03 09:35:01-05:00      NaN
2000-01-03 09:40:01-05:00 -99979.1
# historical pnl=
asset_id                     101
2000-01-03 09:30:00-05:00    NaN
2000-01-03 09:30:01-05:00   0.00
2000-01-03 09:35:01-05:00   0.00
2000-01-03 09:40:01-05:00 -32.46
# historical statistics=
                             pnl  gross_volume  net_volume       gmv       nmv       cash  net_wealth  leverage
2000-01-03 09:30:00-05:00    NaN           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
2000-01-03 09:30:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
2000-01-03 09:35:01-05:00   0.00           0.0         0.0      0.00      0.00  1000000.0  1000000.00       0.0
2000-01-03 09:40:01-05:00 -32.46       99979.1     99979.1  99946.63  99946.63   900020.9   999967.54       0.1

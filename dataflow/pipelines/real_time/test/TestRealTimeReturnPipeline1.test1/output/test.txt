events_as_str=
num_it=1 current_time='2010-01-04 09:30:00'
num_it=2 current_time='2010-01-04 09:35:00'
num_it=3 current_time='2010-01-04 09:40:00'
result_bundles=
config:
  load_prices:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      period: last_5mins
      asset_id_col: asset_id
      multiindex_output: False
  filter_weekends:
    col_mode: replace_all
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample_prices_to_1min:
    func_kwargs:
      rule: 1T
      price_cols: ['close']
      volume_cols: ['vol']
  compute_vwap:
    func_kwargs:
      rule: 5T
      price_col: close
      volume_col: vol
      add_bar_start_timestamps: True
      add_epoch: True
      add_last_price: True
  compute_ret_0:
    cols: ['twap', 'vwap']
    col_mode: merge_all
    transformer_kwargs:
      mode: pct_change
result_nid: compute_ret_0
method: predict
result_df:                            vwap  twap  last       bar_start_timestamp  \
end_datetime                                                            
2000-01-01 09:35:00-05:00   NaN   NaN   NaN 2000-01-01 09:30:00-05:00   

                             minute  twap_ret_0  vwap_ret_0  
end_datetime                                                 
2000-01-01 09:35:00-05:00  15778955         NaN         NaN  
column_to_tags: None
info:
  load_prices:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  5 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    5 non-null      datetime64[ns, America/New_York]
       2   close           5 non-null      float64                         
       3   vol             5 non-null      float64                         
       4   asset_id        5 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  filter_weekends:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  0 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    0 non-null      datetime64[ns, America/New_York]
       2   close           0 non-null      float64                         
       3   vol             0 non-null      float64                         
       4   asset_id        0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(3)
  filter_ath:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  0 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    0 non-null      datetime64[ns, America/New_York]
       2   close           0 non-null      float64                         
       3   vol             0 non-null      float64                         
       4   asset_id        0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(3)
  resample_prices_to_1min:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:31:00-05:00 to 2000-01-01 09:35:00-05:00
      Freq: T
      Data columns (total 2 columns):
       #   Column  Non-Null Count  Dtype  
      ---  ------  --------------  -----  
       0   close   0 non-null      float64
       1   vol     0 non-null      float64
      dtypes: float64(2)
  compute_vwap:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:35:00-05:00 to 2000-01-01 09:35:00-05:00
      Freq: 5T
      Data columns (total 5 columns):
       #   Column               Non-Null Count  Dtype                           
      ---  ------               --------------  -----                           
       0   vwap                 0 non-null      float64                         
       1   twap                 0 non-null      float64                         
       2   last                 0 non-null      float64                         
       3   bar_start_timestamp  1 non-null      datetime64[ns, America/New_York]
       4   minute               1 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](1), float64(3), int64(1)
  compute_ret_0:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:35:00-05:00 to 2000-01-01 09:35:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column               Non-Null Count  Dtype                           
      ---  ------               --------------  -----                           
       0   vwap                 0 non-null      float64                         
       1   twap                 0 non-null      float64                         
       2   last                 0 non-null      float64                         
       3   bar_start_timestamp  1 non-null      datetime64[ns, America/New_York]
       4   minute               1 non-null      int64                           
       5   twap_ret_0           0 non-null      float64                         
       6   vwap_ret_0           0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](1), float64(5), int64(1)
payload: None
class: ResultBundle
config:
  load_prices:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      period: last_5mins
      asset_id_col: asset_id
      multiindex_output: False
  filter_weekends:
    col_mode: replace_all
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample_prices_to_1min:
    func_kwargs:
      rule: 1T
      price_cols: ['close']
      volume_cols: ['vol']
  compute_vwap:
    func_kwargs:
      rule: 5T
      price_col: close
      volume_col: vol
      add_bar_start_timestamps: True
      add_epoch: True
      add_last_price: True
  compute_ret_0:
    cols: ['twap', 'vwap']
    col_mode: merge_all
    transformer_kwargs:
      mode: pct_change
result_nid: compute_ret_0
method: predict
result_df:                            vwap  twap  last       bar_start_timestamp  \
end_datetime                                                            
2000-01-01 09:40:00-05:00   NaN   NaN   NaN 2000-01-01 09:35:00-05:00   

                             minute  twap_ret_0  vwap_ret_0  
end_datetime                                                 
2000-01-01 09:40:00-05:00  15778960         NaN         NaN  
column_to_tags: None
info:
  load_prices:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  5 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    5 non-null      datetime64[ns, America/New_York]
       2   close           5 non-null      float64                         
       3   vol             5 non-null      float64                         
       4   asset_id        5 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  filter_weekends:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  0 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    0 non-null      datetime64[ns, America/New_York]
       2   close           0 non-null      float64                         
       3   vol             0 non-null      float64                         
       4   asset_id        0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(3)
  filter_ath:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  0 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    0 non-null      datetime64[ns, America/New_York]
       2   close           0 non-null      float64                         
       3   vol             0 non-null      float64                         
       4   asset_id        0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(3)
  resample_prices_to_1min:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:36:00-05:00 to 2000-01-01 09:40:00-05:00
      Freq: T
      Data columns (total 2 columns):
       #   Column  Non-Null Count  Dtype  
      ---  ------  --------------  -----  
       0   close   0 non-null      float64
       1   vol     0 non-null      float64
      dtypes: float64(2)
  compute_vwap:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:40:00-05:00 to 2000-01-01 09:40:00-05:00
      Freq: 5T
      Data columns (total 5 columns):
       #   Column               Non-Null Count  Dtype                           
      ---  ------               --------------  -----                           
       0   vwap                 0 non-null      float64                         
       1   twap                 0 non-null      float64                         
       2   last                 0 non-null      float64                         
       3   bar_start_timestamp  1 non-null      datetime64[ns, America/New_York]
       4   minute               1 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](1), float64(3), int64(1)
  compute_ret_0:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:40:00-05:00 to 2000-01-01 09:40:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column               Non-Null Count  Dtype                           
      ---  ------               --------------  -----                           
       0   vwap                 0 non-null      float64                         
       1   twap                 0 non-null      float64                         
       2   last                 0 non-null      float64                         
       3   bar_start_timestamp  1 non-null      datetime64[ns, America/New_York]
       4   minute               1 non-null      int64                           
       5   twap_ret_0           0 non-null      float64                         
       6   vwap_ret_0           0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](1), float64(5), int64(1)
payload: None
class: ResultBundle
config:
  load_prices:
    source_node_name: RealTimeDataSource
    source_node_kwargs:
      market_data: <market_data.replayed_market_data.ReplayedMarketData object>
      period: last_5mins
      asset_id_col: asset_id
      multiindex_output: False
  filter_weekends:
    col_mode: replace_all
  filter_ath:
    col_mode: replace_all
    transformer_kwargs:
      start_time: 09:30:00
      end_time: 16:00:00
  resample_prices_to_1min:
    func_kwargs:
      rule: 1T
      price_cols: ['close']
      volume_cols: ['vol']
  compute_vwap:
    func_kwargs:
      rule: 5T
      price_col: close
      volume_col: vol
      add_bar_start_timestamps: True
      add_epoch: True
      add_last_price: True
  compute_ret_0:
    cols: ['twap', 'vwap']
    col_mode: merge_all
    transformer_kwargs:
      mode: pct_change
result_nid: compute_ret_0
method: predict
result_df:                            vwap  twap  last       bar_start_timestamp  \
end_datetime                                                            
2000-01-01 09:45:00-05:00   NaN   NaN   NaN 2000-01-01 09:40:00-05:00   

                             minute  twap_ret_0  vwap_ret_0  
end_datetime                                                 
2000-01-01 09:45:00-05:00  15778965         NaN         NaN  
column_to_tags: None
info:
  load_prices:
    predict:
      predict_df_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  5 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    5 non-null      datetime64[ns, America/New_York]
       2   close           5 non-null      float64                         
       3   vol             5 non-null      float64                         
       4   asset_id        5 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](2), float64(2), int64(1)
  filter_weekends:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  0 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    0 non-null      datetime64[ns, America/New_York]
       2   close           0 non-null      float64                         
       3   vol             0 non-null      float64                         
       4   asset_id        0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(3)
  filter_ath:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Data columns (total 5 columns):
       #   Column          Non-Null Count  Dtype                           
      ---  ------          --------------  -----                           
       0   start_datetime  0 non-null      datetime64[ns, America/New_York]
       1   timestamp_db    0 non-null      datetime64[ns, America/New_York]
       2   close           0 non-null      float64                         
       3   vol             0 non-null      float64                         
       4   asset_id        0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](2), float64(3)
  resample_prices_to_1min:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 5 entries, 2000-01-01 09:41:00-05:00 to 2000-01-01 09:45:00-05:00
      Freq: T
      Data columns (total 2 columns):
       #   Column  Non-Null Count  Dtype  
      ---  ------  --------------  -----  
       0   close   0 non-null      float64
       1   vol     0 non-null      float64
      dtypes: float64(2)
  compute_vwap:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:45:00-05:00 to 2000-01-01 09:45:00-05:00
      Freq: 5T
      Data columns (total 5 columns):
       #   Column               Non-Null Count  Dtype                           
      ---  ------               --------------  -----                           
       0   vwap                 0 non-null      float64                         
       1   twap                 0 non-null      float64                         
       2   last                 0 non-null      float64                         
       3   bar_start_timestamp  1 non-null      datetime64[ns, America/New_York]
       4   minute               1 non-null      int64                           
      dtypes: datetime64[ns, America/New_York](1), float64(3), int64(1)
  compute_ret_0:
    predict:
      df_transformed_info: <class 'pandas.core.frame.DataFrame'>
      DatetimeIndex: 1 entries, 2000-01-01 09:45:00-05:00 to 2000-01-01 09:45:00-05:00
      Freq: 5T
      Data columns (total 7 columns):
       #   Column               Non-Null Count  Dtype                           
      ---  ------               --------------  -----                           
       0   vwap                 0 non-null      float64                         
       1   twap                 0 non-null      float64                         
       2   last                 0 non-null      float64                         
       3   bar_start_timestamp  1 non-null      datetime64[ns, America/New_York]
       4   minute               1 non-null      int64                           
       5   twap_ret_0           0 non-null      float64                         
       6   vwap_ret_0           0 non-null      float64                         
      dtypes: datetime64[ns, America/New_York](1), float64(5), int64(1)
payload: None
class: ResultBundle
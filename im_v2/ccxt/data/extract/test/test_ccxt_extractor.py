import logging
import unittest.mock as umock
from typing import Optional

import pandas as pd
import pytest

import helpers.hdbg as hdbg
import helpers.henv as henv
import helpers.hpandas as hpandas
import helpers.hunit_test as hunitest
import im_v2.ccxt.data.extract.extractor as ivcdexex

_LOG = logging.getLogger(__name__)


class CcxtExtractorMock(ivcdexex.CcxtExtractor):
    original_ccxt_autospec = umock.create_autospec(ivcdexex.ccxt.Exchange, spec_set=True)

    def log_into_exchange(self) -> ivcdexex.ccxt.Exchange:
        ccxt_exchange_autospec = umock.create_autospec(ivcdexex.ccxt.Exchange, spec_set=True)
        ccxt_exchange_autospec.parse_timeframe = self.__parse_timeframe
        ccxt_exchange_autospec.load_markets = lambda: {"DUMMY/DUMMY": {}}
        ccxt_exchange_autospec.fetch_ohlcv = self.__fetch_ohlcv
        return ccxt_exchange_autospec

    def __parse_timeframe(self, time: str):
        self.original_ccxt_autospec.parse_timeframe(time)
        timeframe_map = {"1m": 60}
        parsed = timeframe_map.get(time)
        if parsed is None:
            raise Exception("sdfsd")
        return parsed

    def __fetch_ohlcv(self, * args, **kwargs):
        self.original_ccxt_autospec.fetch_ohlcv(*args, **kwargs)
        return [[1645660800000, 37250.02, 37267.8, 37205.4, 37218.81, 59.1615], [1645660860000, 37218.8, 37234.26, 37213.2, 37214.46, 23.41537], [1645660920000, 37214.47, 37224.2, 37138.58, 37138.58, 48.11884], [1645660980000, 37138.59, 37216.5, 37100.17, 37216.49, 53.65817], [1645661040000, 37216.49, 37302.46, 37213.66, 37270.45, 36.44746], [1645661100000, 37270.44, 37308.36, 37254.49, 37300.87, 35.01005], [1645661160000, 37300.88, 37345.03, 37300.87, 37333.88, 27.75337], [1645661220000, 37333.88, 37350.0, 37291.48, 37291.49, 30.36414], [1645661280000, 37291.49, 37291.49, 37217.81, 37266.34, 41.57231], [1645661340000, 37266.34, 37303.15, 37241.96, 37299.81, 14.23845], [1645661400000, 37299.8, 37315.18, 37278.9, 37315.17, 10.35913], [1645661460000, 37315.18, 37374.49, 37315.17, 37360.9, 20.17365], [1645661520000, 37360.91, 37399.0, 37360.9, 37388.07, 28.18373], [1645661580000, 37388.06, 37427.81, 37359.71, 37411.44, 32.68841], [1645661640000, 37411.43, 37411.81, 37337.68, 37339.54, 25.54825], [1645661700000, 37339.54, 37375.87, 37331.72, 37375.87, 9.97535], [1645661760000, 37375.87, 37392.3, 37360.49, 37381.73, 9.938], [1645661820000, 37381.72, 37381.73, 37310.72, 37316.47, 24.61768], [1645661880000, 37316.48, 37316.48, 37248.81, 37248.82, 33.15008], [1645661940000, 37248.82, 37273.76, 37237.63, 37248.27, 17.59719], [1645662000000, 37248.28, 37248.28, 37206.0, 37223.98, 24.72097], [1645662060000, 37223.98, 37238.83, 37201.63, 37230.11, 24.61485], [1645662120000, 37230.1, 37280.15, 37230.1, 37275.16, 14.33549], [1645662180000, 37275.16, 37279.62, 37242.33, 37268.13, 22.52561], [1645662240000, 37268.12, 37268.13, 37255.54, 37267.06, 8.15549], [1645662300000, 37267.06, 37313.67, 37267.05, 37304.56, 8.37596], [1645662360000, 37304.56, 37320.0, 37301.19, 37301.19, 15.95005], [1645662420000, 37301.19, 37349.55, 37286.91, 37346.45, 12.66161], [1645662480000, 37346.44, 37348.3, 37312.15, 37315.99, 17.03335], [1645662540000, 37316.0, 37316.0, 37148.13, 37211.65, 108.71564], [1645662600000, 37211.66, 37214.18, 37101.64, 37121.03, 51.92877], [1645662660000, 37121.04, 37143.23, 37066.28, 37103.12, 68.36667], [1645662720000, 37103.12, 37116.61, 37052.81, 37063.13, 48.31696], [1645662780000, 37063.13, 37085.06, 37050.0, 37085.05, 32.81241], [1645662840000, 37085.05, 37099.06, 37060.8, 37064.39, 33.65264], [1645662900000, 37064.39, 37134.81, 37058.69, 37094.75, 36.61206], [1645662960000, 37094.76, 37103.87, 36918.63, 36954.57, 249.52955], [1645663020000, 36954.58, 37047.61, 36921.77, 37020.82, 142.82604], [1645663080000, 37020.83, 37067.64, 36962.49, 36962.49, 42.52513], [1645663140000, 36962.5, 37003.13, 36905.14, 36986.93, 105.9063], [1645663200000, 36986.92, 37005.98, 36946.76, 36976.55, 27.0922], [1645663260000, 36976.55, 36980.43, 36850.0, 36858.2, 151.07454], [1645663320000, 36858.21, 36879.39, 36830.31, 36845.41, 61.89346], [1645663380000, 36845.41, 36905.17, 36838.6, 36893.25, 63.71149], [1645663440000, 36893.25, 36904.34, 36827.88, 36890.93, 46.91945], [1645663500000, 36890.93, 36902.0, 36859.01, 36866.08, 24.63885], [1645663560000, 36866.08, 36910.6, 36833.25, 36910.6, 27.98836], [1645663620000, 36910.6, 36940.47, 36905.69, 36928.73, 29.83968], [1645663680000, 36928.72, 36928.73, 36876.4, 36890.88, 16.56848], [1645663740000, 36890.88, 36890.89, 36802.98, 36827.55, 91.36958], [1645663800000, 36827.55, 36835.31, 36721.66, 36758.34, 80.91288], [1645663860000, 36758.33, 36780.15, 36729.52, 36777.52, 42.56897], [1645663920000, 36777.53, 36803.77, 36700.3, 36803.77, 51.50241], [1645663980000, 36803.76, 36803.77, 36727.48, 36739.52, 34.14701], [1645664040000, 36739.52, 36794.99, 36735.84, 36742.16, 48.41181], [1645664100000, 36742.15, 36828.65, 36730.0, 36812.81, 28.88141], [1645664160000, 36812.8, 36817.09, 36787.52, 36801.23, 18.1288], [1645664220000, 36801.22, 36822.83, 36774.72, 36785.9, 27.99175], [1645664280000, 36785.9, 36806.0, 36771.24, 36804.9, 19.58383], [1645664340000, 36804.89, 36811.41, 36725.77, 36755.82, 42.74134], [1645664400000, 36755.83, 36830.0, 36753.53, 36812.21, 35.77496], [1645664460000, 36812.2, 36834.97, 36785.06, 36834.96, 24.29063], [1645664520000, 36834.97, 36870.76, 36795.29, 36864.75, 36.43563], [1645664580000, 36864.75, 36866.45, 36837.54, 36864.66, 11.08501], [1645664640000, 36864.66, 36876.95, 36822.62, 36826.31, 13.57685], [1645664700000, 36826.3, 36863.21, 36814.47, 36863.2, 23.28191], [1645664760000, 36863.2, 36869.99, 36819.05, 36824.25, 29.16263], [1645664820000, 36824.25, 36875.0, 36822.71, 36874.6, 26.24869], [1645664880000, 36874.6, 36875.01, 36851.72, 36862.35, 9.55998], [1645664940000, 36862.36, 36862.36, 36841.11, 36850.01, 26.16715], [1645665000000, 36850.0, 36924.17, 36840.0, 36911.46, 42.72042], [1645665060000, 36911.46, 36940.0, 36911.45, 36926.65, 24.01195], [1645665120000, 36926.66, 36926.66, 36861.09, 36897.62, 69.34417], [1645665180000, 36897.61, 36897.62, 36857.84, 36890.79, 32.02531], [1645665240000, 36890.79, 36900.92, 36868.3, 36871.95, 14.51684], [1645665300000, 36871.94, 36900.0, 36846.87, 36846.88, 22.05089], [1645665360000, 36846.88, 36865.07, 36820.0, 36859.07, 25.93505], [1645665420000, 36859.06, 36864.31, 36820.75, 36842.85, 16.531], [1645665480000, 36842.86, 36854.28, 36773.79, 36784.22, 63.54822], [1645665540000, 36784.22, 36817.51, 36784.22, 36804.24, 27.52834], [1645665600000, 36804.24, 36815.79, 36790.0, 36808.52, 36.26679], [1645665660000, 36809.87, 36811.0, 36773.31, 36780.74, 48.59914], [1645665720000, 36780.73, 36791.59, 36764.62, 36787.97, 26.86802], [1645665780000, 36787.96, 36804.0, 36763.97, 36800.01, 15.1311], [1645665840000, 36800.0, 36805.93, 36786.48, 36790.55, 18.91301], [1645665900000, 36790.55, 36817.49, 36790.55, 36813.63, 19.80706], [1645665960000, 36813.62, 36819.74, 36774.94, 36774.96, 10.87927], [1645666020000, 36774.95, 36780.17, 36680.0, 36686.51, 103.70554], [1645666080000, 36686.51, 36700.92, 36638.0, 36677.57, 191.22889], [1645666140000, 36676.85, 36737.84, 36675.7, 36702.3, 50.24223], [1645666200000, 36702.29, 36766.56, 36677.13, 36760.75, 31.47388], [1645666260000, 36760.76, 36857.41, 36730.23, 36833.03, 77.66563], [1645666320000, 36833.03, 36862.79, 36789.27, 36850.89, 47.31749], [1645666380000, 36850.89, 36864.61, 36820.61, 36834.43, 42.25792], [1645666440000, 36834.43, 36840.99, 36799.58, 36810.82, 20.80582], [1645666500000, 36810.82, 36843.54, 36810.81, 36836.97, 13.32522], [1645666560000, 36836.96, 36865.7, 36826.87, 36850.77, 22.17658], [1645666620000, 36850.77, 36869.38, 36827.33, 36852.05, 24.42198], [1645666680000, 36852.05, 36878.91, 36843.74, 36873.51, 15.70724], [1645666740000, 36873.52, 36878.89, 36852.19, 36864.38, 12.84788], [1645666800000, 36864.38, 36898.29, 36852.77, 36856.16, 32.45899], [1645666860000, 36856.16, 36858.13, 36830.94, 36848.9, 16.12562], [1645666920000, 36848.88, 36858.36, 36839.92, 36854.63, 9.66498], [1645666980000, 36854.63, 36893.23, 36851.38, 36885.62, 20.00594], [1645667040000, 36885.61, 36899.04, 36873.82, 36885.82, 15.87725], [1645667100000, 36885.83, 36902.04, 36870.66, 36887.79, 15.11409], [1645667160000, 36887.79, 36898.0, 36883.54, 36887.94, 14.0366], [1645667220000, 36887.95, 36935.03, 36880.0, 36928.12, 27.57936], [1645667280000, 36928.12, 36954.55, 36909.02, 36919.11, 51.60676], [1645667340000, 36919.1, 36945.97, 36900.84, 36905.73, 36.66656], [1645667400000, 36905.74, 36983.49, 36905.73, 36981.71, 42.50092], [1645667460000, 36981.71, 37080.48, 36959.5, 37001.21, 99.06947], [1645667520000, 37001.2, 37001.91, 36942.82, 36981.21, 29.63565], [1645667580000, 36981.21, 36996.55, 36952.9, 36959.17, 18.0786], [1645667640000, 36959.16, 36971.04, 36931.04, 36932.75, 41.82252], [1645667700000, 36932.75, 36947.97, 36915.84, 36941.3, 26.6827], [1645667760000, 36941.31, 36953.13, 36915.5, 36920.32, 22.1002], [1645667820000, 36920.32, 36968.27, 36908.65, 36968.26, 29.00251], [1645667880000, 36968.26, 36968.27, 36943.8, 36956.39, 24.37653], [1645667940000, 36956.39, 36958.25, 36922.04, 36949.63, 20.16945], [1645668000000, 36949.63, 37008.08, 36949.62, 36985.48, 21.43636], [1645668060000, 36985.47, 37007.0, 36954.07, 36959.79, 28.58085], [1645668120000, 36959.8, 36959.8, 36900.48, 36903.49, 34.15572], [1645668180000, 36903.5, 36927.02, 36887.06, 36887.17, 14.89312], [1645668240000, 36887.17, 36953.15, 36887.17, 36910.09, 31.62818], [1645668300000, 36910.09, 36918.82, 36871.0, 36895.65, 48.71343], [1645668360000, 36895.65, 36907.49, 36872.65, 36879.39, 14.85011], [1645668420000, 36880.56, 36928.29, 36879.23, 36909.03, 52.54987], [1645668480000, 36909.03, 36914.0, 36891.89, 36909.67, 37.49474], [1645668540000, 36909.67, 36912.33, 36850.0, 36892.13, 43.37838], [1645668600000, 36892.13, 36912.2, 36883.86, 36893.55, 43.87451], [1645668660000, 36893.55, 36929.14, 36877.95, 36924.57, 19.91708], [1645668720000, 36924.57, 36940.39, 36924.35, 36937.98, 9.26303], [1645668780000, 36937.97, 36965.78, 36937.88, 36952.08, 15.97087], [1645668840000, 36952.08, 36952.08, 36917.18, 36917.19, 18.558], [1645668900000, 36917.2, 36979.71, 36909.71, 36959.5, 27.22191], [1645668960000, 36959.49, 36991.42, 36955.97, 36989.41, 24.67219], [1645669020000, 36989.4, 37004.07, 36956.03, 36966.95, 23.38788], [1645669080000, 36966.94, 36978.39, 36961.09, 36972.25, 8.93815], [1645669140000, 36972.24, 37012.0, 36972.24, 37002.03, 22.8641], [1645669200000, 37002.03, 37019.63, 36962.85, 36973.54, 49.66152], [1645669260000, 36973.55, 36983.05, 36937.99, 36938.0, 11.48798], [1645669320000, 36938.0, 36990.23, 36937.99, 36981.23, 19.07423], [1645669380000, 36981.23, 37006.82, 36966.0, 36967.25, 20.12943], [1645669440000, 36967.26, 36986.0, 36966.2, 36969.66, 17.42915], [1645669500000, 36969.67, 36978.39, 36929.77, 36941.35, 45.48048], [1645669560000, 36941.36, 36941.36, 36901.0, 36932.24, 28.28411], [1645669620000, 36932.24, 36935.93, 36906.64, 36916.01, 32.68644], [1645669680000, 36916.01, 36926.02, 36880.39, 36906.44, 35.65316], [1645669740000, 36906.45, 36910.59, 36865.99, 36866.0, 42.26526], [1645669800000, 36866.0, 36886.84, 36860.0, 36869.88, 21.64887], [1645669860000, 36869.87, 36915.04, 36868.4, 36870.53, 34.74121], [1645669920000, 36870.53, 36895.23, 36864.96, 36878.75, 28.76397], [1645669980000, 36878.75, 36889.44, 36870.7, 36874.32, 14.34556], [1645670040000, 36874.31, 36888.74, 36860.0, 36887.97, 15.7094], [1645670100000, 36887.97, 36893.05, 36866.72, 36889.56, 18.16703], [1645670160000, 36889.56, 36900.0, 36873.99, 36899.99, 26.95098], [1645670220000, 36899.99, 36954.62, 36899.99, 36939.81, 27.42767], [1645670280000, 36939.8, 36957.25, 36927.77, 36957.25, 19.76899], [1645670340000, 36957.24, 36964.38, 36945.41, 36953.32, 11.27256], [1645670400000, 36953.32, 36954.41, 36931.41, 36950.27, 22.14383], [1645670460000, 36950.28, 36958.48, 36932.5, 36949.99, 10.71862], [1645670520000, 36950.0, 36962.3, 36947.0, 36948.96, 12.76492], [1645670580000, 36948.96, 36958.79, 36937.2, 36941.17, 24.97788], [1645670640000, 36941.17, 36965.51, 36939.43, 36965.51, 21.26136], [1645670700000, 36965.5, 36969.2, 36927.63, 36950.01, 12.95587], [1645670760000, 36950.01, 36969.89, 36933.63, 36963.93, 15.98554], [1645670820000, 36963.93, 37000.03, 36933.82, 36933.82, 47.28267], [1645670880000, 36933.82, 36981.43, 36933.82, 36955.33, 46.39089], [1645670940000, 36955.33, 36981.24, 36915.34, 36932.55, 75.4265], [1645671000000, 36932.55, 36932.55, 36829.88, 36857.0, 91.35818], [1645671060000, 36857.0, 36872.27, 36789.26, 36789.29, 75.46812], [1645671120000, 36789.28, 36862.88, 36759.59, 36837.12, 73.24868], [1645671180000, 36837.11, 36850.0, 36733.16, 36741.67, 43.79224], [1645671240000, 36741.67, 36790.19, 36729.46, 36759.27, 53.10496], [1645671300000, 36759.27, 36797.66, 36658.23, 36664.71, 169.65264], [1645671360000, 36664.72, 36670.92, 36236.84, 36248.81, 856.18204], [1645671420000, 36248.81, 36339.0, 36126.02, 36177.72, 440.33845], [1645671480000, 36177.72, 36181.52, 35930.0, 35980.68, 841.41943], [1645671540000, 35976.15, 36027.58, 35820.03, 35924.92, 515.63046], [1645671600000, 35924.92, 35954.99, 35627.11, 35687.18, 674.45387], [1645671660000, 35687.18, 35872.3, 35566.28, 35809.35, 371.03804], [1645671720000, 35809.34, 35885.53, 35676.49, 35753.96, 218.83695], [1645671780000, 35753.96, 35800.0, 35635.19, 35635.19, 220.54813], [1645671840000, 35635.19, 35677.1, 35500.0, 35547.87, 435.12674], [1645671900000, 35547.88, 35667.55, 35477.0, 35516.0, 376.51126], [1645671960000, 35516.0, 35585.31, 35500.0, 35550.64, 202.67738], [1645672020000, 35550.64, 35557.32, 35266.0, 35284.6, 435.58565], [1645672080000, 35284.6, 35358.06, 35157.75, 35244.71, 517.41158], [1645672140000, 35244.71, 35305.51, 35171.13, 35285.84, 262.16889], [1645672200000, 35284.91, 35507.72, 35273.16, 35387.75, 192.49128], [1645672260000, 35387.76, 35500.0, 35370.8, 35467.95, 202.78167], [1645672320000, 35465.99, 35697.88, 35428.47, 35583.92, 278.82671], [1645672380000, 35590.99, 35612.06, 35488.14, 35596.8, 172.3389], [1645672440000, 35596.8, 35649.67, 35491.91, 35536.61, 181.74835], [1645672500000, 35536.62, 35602.02, 35500.0, 35521.25, 117.1329], [1645672560000, 35521.25, 35642.85, 35520.92, 35607.26, 191.51485], [1645672620000, 35607.26, 35662.32, 35543.61, 35545.4, 206.59879], [1645672680000, 35545.39, 35618.28, 35504.0, 35611.08, 151.18194], [1645672740000, 35611.09, 35661.01, 35587.61, 35591.33, 144.92966], [1645672800000, 35591.33, 35669.9, 35568.0, 35575.79, 123.76922], [1645672860000, 35575.79, 35581.78, 35526.72, 35548.46, 94.7931], [1645672920000, 35548.47, 35593.55, 35500.68, 35510.8, 96.99042], [1645672980000, 35510.79, 35536.97, 35400.0, 35426.5, 139.51488], [1645673040000, 35426.49, 35463.85, 35330.46, 35346.81, 150.47752], [1645673100000, 35346.82, 35609.16, 35342.27, 35555.11, 249.82958], [1645673160000, 35555.12, 35634.01, 35538.0, 35585.82, 133.94971], [1645673220000, 35586.85, 35620.22, 35532.8, 35537.55, 86.57123], [1645673280000, 35537.54, 35581.47, 35400.61, 35460.93, 123.70467], [1645673340000, 35460.93, 35510.42, 35417.76, 35440.97, 93.00323], [1645673400000, 35440.98, 35440.98, 35348.93, 35369.96, 102.80552], [1645673460000, 35369.96, 35372.9, 35284.0, 35336.88, 149.63424], [1645673520000, 35336.89, 35484.79, 35333.23, 35419.53, 118.74839], [1645673580000, 35419.53, 35447.28, 35350.0, 35363.87, 105.10512], [1645673640000, 35364.99, 35367.49, 35233.29, 35258.65, 162.84373], [1645673700000, 35258.64, 35447.67, 35250.65, 35358.03, 190.86638], [1645673760000, 35358.02, 35431.9, 35350.21, 35385.63, 60.24862], [1645673820000, 35385.62, 35432.82, 35351.62, 35351.82, 127.22129], [1645673880000, 35351.81, 35366.78, 35300.0, 35302.58, 123.03404], [1645673940000, 35302.57, 35327.32, 35178.62, 35178.63, 96.76096], [1645674000000, 35178.62, 35265.19, 35105.31, 35106.07, 295.35539], [1645674060000, 35106.07, 35154.94, 35000.0, 35064.05, 543.24374], [1645674120000, 35071.93, 35166.07, 35006.52, 35015.82, 165.01888], [1645674180000, 35015.82, 35033.07, 34720.53, 34775.22, 668.94532], [1645674240000, 34775.22, 34944.53, 34739.41, 34889.67, 360.01793], [1645674300000, 34889.0, 35240.95, 34889.0, 35131.41, 290.60617], [1645674360000, 35131.41, 35265.44, 35092.99, 35221.6, 210.79519], [1645674420000, 35221.6, 35396.23, 35221.6, 35222.22, 208.02571], [1645674480000, 35223.09, 35299.53, 35200.0, 35238.72, 161.83254], [1645674540000, 35238.72, 35345.78, 35237.85, 35344.33, 145.80212], [1645674600000, 35344.34, 35358.83, 35256.01, 35296.7, 190.95294], [1645674660000, 35296.71, 35315.52, 35179.71, 35204.16, 132.38967], [1645674720000, 35204.15, 35244.6, 35089.83, 35119.76, 122.9909], [1645674780000, 35119.75, 35196.04, 35078.86, 35191.6, 87.37726], [1645674840000, 35191.6, 35300.0, 35187.15, 35190.01, 94.09851], [1645674900000, 35190.01, 35230.23, 35112.05, 35120.03, 77.47092], [1645674960000, 35121.07, 35174.8, 35103.65, 35115.43, 84.24338], [1645675020000, 35115.44, 35185.27, 35066.72, 35082.76, 136.49332], [1645675080000, 35082.76, 35085.09, 34888.0, 34916.64, 256.21673], [1645675140000, 34916.64, 35000.0, 34879.32, 34936.89, 253.51026], [1645675200000, 34936.9, 35027.34, 34840.36, 34866.57, 263.5286], [1645675260000, 34866.57, 34977.28, 34788.0, 34967.02, 195.61182], [1645675320000, 34967.02, 34977.56, 34750.0, 34821.93, 292.68154], [1645675380000, 34821.92, 34897.55, 34701.0, 34897.55, 318.82425], [1645675440000, 34897.54, 35200.0, 34897.54, 35077.24, 318.512], [1645675500000, 35077.25, 35159.7, 35012.11, 35032.47, 122.76142], [1645675560000, 35032.47, 35032.47, 34891.66, 34947.59, 172.22629], [1645675620000, 34948.86, 35054.13, 34878.12, 35042.26, 161.54369], [1645675680000, 35042.27, 35100.0, 34965.21, 34995.45, 111.96704], [1645675740000, 34995.45, 34999.06, 34883.6, 34888.58, 99.59005], [1645675800000, 34888.57, 34921.3, 34788.37, 34820.0, 165.41487], [1645675860000, 34820.01, 34848.49, 34795.23, 34826.6, 133.98507], [1645675920000, 34826.61, 34838.99, 34711.9, 34783.54, 171.53823], [1645675980000, 34781.43, 34811.62, 34700.93, 34708.02, 167.07703], [1645676040000, 34708.02, 34799.44, 34640.0, 34793.13, 288.00344], [1645676100000, 34799.42, 34799.86, 34600.0, 34608.8, 183.77704], [1645676160000, 34608.81, 34693.67, 34536.0, 34607.94, 271.9473], [1645676220000, 34607.94, 34863.63, 34584.71, 34792.82, 271.60253], [1645676280000, 34792.82, 34928.49, 34782.46, 34856.68, 223.18012], [1645676340000, 34856.68, 34864.94, 34770.42, 34844.07, 120.08529], [1645676400000, 34844.07, 34914.98, 34820.26, 34888.37, 159.82129], [1645676460000, 34888.37, 34959.63, 34785.16, 34946.2, 121.03358], [1645676520000, 34946.21, 35000.0, 34904.6, 34914.6, 147.66692], [1645676580000, 34914.6, 34981.76, 34841.36, 34978.42, 122.83462], [1645676640000, 34978.42, 35022.05, 34944.68, 34950.0, 147.11491], [1645676700000, 34950.0, 34957.09, 34888.0, 34900.0, 60.85822], [1645676760000, 34899.99, 34900.0, 34837.71, 34879.99, 99.6142], [1645676820000, 34879.99, 34902.84, 34816.8, 34889.68, 79.90098], [1645676880000, 34889.69, 34899.35, 34823.28, 34838.98, 66.29708], [1645676940000, 34838.98, 34838.99, 34748.09, 34779.01, 229.73068], [1645677000000, 34779.02, 34923.94, 34775.51, 34900.0, 100.837], [1645677060000, 34900.01, 34923.95, 34844.01, 34870.0, 90.20794], [1645677120000, 34869.99, 34959.9, 34869.99, 34940.38, 91.53064], [1645677180000, 34940.38, 35037.05, 34916.02, 35017.68, 145.68072], [1645677240000, 35017.67, 35066.27, 34986.64, 35000.02, 175.6882], [1645677300000, 35000.02, 35277.54, 34959.4, 35088.55, 314.75177], [1645677360000, 35088.54, 35130.0, 35020.66, 35119.74, 122.02553], [1645677420000, 35119.74, 35163.0, 35092.04, 35134.78, 117.63627], [1645677480000, 35136.37, 35199.73, 35092.0, 35179.82, 107.81333], [1645677540000, 35179.81, 35179.82, 35082.05, 35094.06, 126.87327], [1645677600000, 35094.07, 35097.92, 35000.0, 35064.36, 139.66316], [1645677660000, 35064.36, 35064.37, 35006.07, 35033.31, 95.284], [1645677720000, 35033.31, 35090.2, 35001.01, 35072.63, 63.26905], [1645677780000, 35072.63, 35200.0, 35072.62, 35176.59, 76.75866], [1645677840000, 35176.59, 35214.6, 35000.0, 35008.73, 276.1748], [1645677900000, 35008.73, 35052.51, 34938.77, 34975.33, 156.4041], [1645677960000, 34975.33, 35010.74, 34962.27, 34983.09, 47.87738], [1645678020000, 34983.09, 35073.54, 34915.37, 35041.88, 61.50408], [1645678080000, 35041.81, 35055.57, 34903.27, 34958.19, 122.30952], [1645678140000, 34958.2, 34968.74, 34916.38, 34938.36, 86.35037], [1645678200000, 34938.36, 35024.19, 34938.35, 35016.92, 75.67232], [1645678260000, 35016.91, 35063.67, 35010.61, 35011.58, 82.5947], [1645678320000, 35011.57, 35041.8, 35000.0, 35022.32, 31.54701], [1645678380000, 35022.32, 35136.16, 35013.83, 35046.51, 104.76307], [1645678440000, 35046.51, 35070.62, 35008.66, 35066.25, 59.03656], [1645678500000, 35066.25, 35077.15, 35031.45, 35070.96, 41.38779], [1645678560000, 35070.96, 35120.0, 35032.3, 35053.08, 57.8375], [1645678620000, 35053.08, 35083.65, 35036.21, 35060.88, 32.08384], [1645678680000, 35060.88, 35066.99, 35043.41, 35054.61, 35.5718], [1645678740000, 35054.6, 35086.71, 35052.04, 35077.91, 38.44112], [1645678800000, 35077.91, 35111.01, 35000.02, 35003.91, 170.34639], [1645678860000, 35003.91, 35025.98, 34977.15, 35004.63, 84.04157], [1645678920000, 35004.63, 35015.11, 34974.68, 34976.43, 29.78102], [1645678980000, 34976.42, 34990.59, 34938.46, 34938.46, 58.65873], [1645679040000, 34938.47, 34972.64, 34902.06, 34927.16, 111.02028], [1645679100000, 34927.15, 34956.29, 34900.0, 34904.38, 67.89694], [1645679160000, 34905.87, 35008.99, 34887.33, 34978.83, 82.82662], [1645679220000, 34978.82, 34980.57, 34920.88, 34939.74, 45.12599], [1645679280000, 34939.75, 34949.75, 34875.0, 34893.65, 130.07055], [1645679340000, 34893.65, 34948.0, 34880.81, 34912.77, 67.17967], [1645679400000, 34912.77, 34945.82, 34902.01, 34912.28, 81.41378], [1645679460000, 34912.28, 34930.0, 34900.0, 34918.89, 47.91945], [1645679520000, 34918.9, 34918.9, 34845.71, 34850.0, 63.88381], [1645679580000, 34850.0, 34877.61, 34805.01, 34828.5, 58.43597], [1645679640000, 34828.49, 34924.1, 34828.49, 34895.99, 68.34963], [1645679700000, 34895.98, 34903.68, 34828.5, 34868.04, 70.54771], [1645679760000, 34868.03, 34915.86, 34860.49, 34860.49, 53.43224], [1645679820000, 34860.49, 34888.84, 34839.1, 34862.34, 51.49225], [1645679880000, 34862.35, 34872.43, 34801.86, 34835.15, 52.17473], [1645679940000, 34835.16, 34872.0, 34813.59, 34871.71, 53.69412], [1645680000000, 34871.71, 34913.26, 34858.31, 34897.32, 62.5675], [1645680060000, 34897.32, 34922.0, 34892.86, 34906.93, 66.46186], [1645680120000, 34906.93, 34948.03, 34893.2, 34933.64, 45.43894], [1645680180000, 34933.64, 34945.85, 34910.0, 34910.0, 30.57775], [1645680240000, 34910.0, 34910.01, 34779.94, 34805.62, 84.21528], [1645680300000, 34805.62, 34808.95, 34663.47, 34699.98, 142.37517], [1645680360000, 34699.97, 34780.78, 34693.49, 34733.36, 80.87976], [1645680420000, 34733.36, 34760.66, 34709.82, 34747.49, 58.94176], [1645680480000, 34747.49, 34747.49, 34636.68, 34664.92, 174.30394], [1645680540000, 34664.92, 34747.08, 34621.08, 34622.24, 138.58111], [1645680600000, 34622.25, 34695.24, 34622.24, 34638.54, 128.727], [1645680660000, 34638.54, 34671.02, 34601.0, 34603.66, 110.44911], [1645680720000, 34603.65, 34700.0, 34554.65, 34673.22, 183.4238], [1645680780000, 34673.21, 34749.4, 34664.2, 34675.74, 114.24833], [1645680840000, 34675.74, 34675.75, 34550.0, 34553.0, 150.33883], [1645680900000, 34553.0, 34719.47, 34514.76, 34675.12, 172.50084], [1645680960000, 34675.11, 34699.21, 34565.88, 34565.89, 81.78169], [1645681020000, 34565.89, 34577.34, 34380.79, 34442.59, 343.29287], [1645681080000, 34442.59, 34544.34, 34333.0, 34503.99, 267.27071], [1645681140000, 34499.79, 34573.27, 34426.88, 34462.3, 121.11999], [1645681200000, 34462.3, 34526.89, 34422.4, 34430.98, 87.51809], [1645681260000, 34430.98, 34522.69, 34385.59, 34508.22, 130.87893], [1645681320000, 34506.7, 34553.74, 34466.78, 34478.26, 99.24345], [1645681380000, 34478.26, 34488.76, 34436.15, 34466.63, 93.32544], [1645681440000, 34466.63, 34486.36, 34384.19, 34420.08, 97.94203], [1645681500000, 34420.08, 34422.83, 34322.28, 34356.98, 201.35007], [1645681560000, 34356.99, 34460.39, 34339.73, 34426.37, 202.65489], [1645681620000, 34426.37, 34550.0, 34406.83, 34447.51, 200.0508], [1645681680000, 34447.5, 34512.7, 34429.95, 34443.07, 111.77966], [1645681740000, 34443.07, 34473.62, 34400.0, 34467.17, 92.53444], [1645681800000, 34467.17, 34562.6, 34467.16, 34551.89, 115.07302], [1645681860000, 34551.89, 34608.11, 34527.97, 34603.61, 89.86961], [1645681920000, 34603.6, 34613.36, 34550.62, 34589.15, 160.12919], [1645681980000, 34593.09, 34617.38, 34538.5, 34617.37, 65.19907], [1645682040000, 34617.38, 34623.81, 34570.04, 34600.0, 77.94043], [1645682100000, 34599.99, 34717.56, 34598.1, 34698.76, 121.1874], [1645682160000, 34698.77, 34790.0, 34688.78, 34777.62, 109.21521], [1645682220000, 34777.63, 34784.13, 34694.44, 34706.0, 78.52647], [1645682280000, 34705.99, 34737.06, 34700.0, 34729.93, 66.17135], [1645682340000, 34729.94, 34730.0, 34600.51, 34680.85, 366.44277], [1645682400000, 34683.58, 34713.16, 34609.08, 34671.39, 110.75019], [1645682460000, 34671.39, 34712.24, 34650.2, 34707.65, 47.30021], [1645682520000, 34707.66, 34788.35, 34707.65, 34788.34, 78.45957], [1645682580000, 34788.35, 34902.16, 34782.3, 34885.96, 133.82555], [1645682640000, 34885.97, 34887.8, 34830.89, 34870.98, 70.19222], [1645682700000, 34870.99, 34874.78, 34803.01, 34828.2, 149.05314], [1645682760000, 34828.2, 34842.65, 34750.54, 34766.86, 88.90497], [1645682820000, 34766.85, 34781.1, 34713.96, 34720.77, 85.30209], [1645682880000, 34720.76, 34735.91, 34705.53, 34712.0, 47.81592], [1645682940000, 34712.0, 34769.29, 34670.06, 34764.47, 73.06806], [1645683000000, 34764.46, 35029.99, 34764.46, 35029.98, 280.88292], [1645683060000, 35029.98, 35106.44, 34953.53, 34967.88, 164.92261], [1645683120000, 34967.88, 34979.7, 34900.66, 34922.04, 164.36628], [1645683180000, 34922.05, 34939.81, 34901.52, 34905.05, 67.0137], [1645683240000, 34905.06, 34923.6, 34884.77, 34897.1, 55.65718], [1645683300000, 34897.1, 34914.06, 34848.57, 34913.8, 54.59357], [1645683360000, 34913.79, 35040.21, 34893.43, 35004.47, 172.61636], [1645683420000, 35004.47, 35082.7, 34967.17, 34967.53, 100.00981], [1645683480000, 34967.53, 34973.14, 34930.31, 34943.75, 63.18266], [1645683540000, 34943.75, 34971.17, 34901.32, 34923.65, 50.64391], [1645683600000, 34923.65, 34929.7, 34880.24, 34880.88, 55.5051], [1645683660000, 34880.87, 34921.67, 34865.28, 34872.77, 51.85022], [1645683720000, 34871.63, 34907.23, 34871.61, 34895.39, 33.57889], [1645683780000, 34895.4, 34895.4, 34861.21, 34888.81, 30.29493], [1645683840000, 34888.81, 34919.74, 34866.69, 34912.67, 33.82029], [1645683900000, 34912.68, 34912.68, 34840.9, 34844.28, 37.15782], [1645683960000, 34844.28, 34884.52, 34836.85, 34880.24, 49.40293], [1645684020000, 34880.25, 34882.83, 34805.31, 34816.82, 73.40757], [1645684080000, 34816.81, 34841.2, 34816.81, 34822.93, 36.85871], [1645684140000, 34822.93, 34860.14, 34806.17, 34836.75, 49.58799], [1645684200000, 34836.76, 34847.67, 34791.65, 34826.59, 67.22329], [1645684260000, 34826.59, 34831.08, 34771.99, 34780.67, 37.66125], [1645684320000, 34780.67, 34821.42, 34777.51, 34782.58, 61.26439], [1645684380000, 34782.58, 34879.21, 34772.71, 34859.53, 58.72326], [1645684440000, 34859.53, 34913.0, 34840.53, 34882.29, 91.97721], [1645684500000, 34882.29, 34882.3, 34815.16, 34822.29, 32.43351], [1645684560000, 34822.28, 34838.0, 34804.48, 34820.07, 41.64114], [1645684620000, 34820.07, 34825.0, 34791.79, 34801.83, 43.56407], [1645684680000, 34801.82, 34857.59, 34765.82, 34848.34, 128.57952], [1645684740000, 34848.35, 34878.88, 34825.33, 34839.4, 54.15044], [1645684800000, 34839.4, 34839.41, 34786.21, 34806.0, 47.04618], [1645684860000, 34806.0, 34860.0, 34803.13, 34838.69, 49.64242], [1645684920000, 34838.69, 34980.18, 34834.26, 34922.32, 69.06035], [1645684980000, 34922.31, 35007.26, 34920.0, 34967.76, 112.78987], [1645685040000, 34967.75, 34986.83, 34923.55, 34957.19, 32.21352], [1645685100000, 34957.2, 34985.37, 34930.01, 34976.21, 36.18755], [1645685160000, 34976.2, 35064.74, 34970.01, 35048.1, 225.43998], [1645685220000, 35048.1, 35054.99, 34990.93, 35018.23, 55.10598], [1645685280000, 35018.22, 35051.5, 34976.0, 34995.0, 49.99926], [1645685340000, 34995.01, 35005.22, 34927.04, 34929.68, 60.55707], [1645685400000, 34929.68, 34943.98, 34813.36, 34871.55, 131.12994], [1645685460000, 34871.55, 34922.5, 34856.0, 34913.62, 62.91637], [1645685520000, 34913.61, 34927.93, 34827.49, 34856.54, 74.78806], [1645685580000, 34856.54, 34887.35, 34838.22, 34852.62, 62.12262], [1645685640000, 34852.62, 34891.51, 34836.43, 34836.44, 43.43619], [1645685700000, 34836.43, 34858.77, 34824.02, 34854.9, 50.16325], [1645685760000, 34854.9, 34920.0, 34846.03, 34853.55, 50.49884], [1645685820000, 34853.54, 34910.59, 34833.56, 34904.61, 31.67146], [1645685880000, 34904.61, 34922.2, 34868.81, 34896.8, 37.47174], [1645685940000, 34896.8, 34906.87, 34856.37, 34901.75, 32.15391], [1645686000000, 34901.76, 34977.95, 34860.91, 34941.13, 58.34215], [1645686060000, 34941.14, 34999.78, 34900.08, 34905.53, 86.21795], [1645686120000, 34905.52, 34937.16, 34856.87, 34865.12, 61.2352], [1645686180000, 34865.11, 34908.39, 34864.76, 34877.76, 44.76859], [1645686240000, 34877.76, 34896.11, 34819.6, 34829.16, 55.4335], [1645686300000, 34829.15, 34838.99, 34750.24, 34777.99, 104.41275], [1645686360000, 34777.99, 34804.85, 34750.0, 34754.13, 104.60247], [1645686420000, 34754.12, 34781.39, 34696.89, 34716.89, 85.17743], [1645686480000, 34716.9, 34742.72, 34697.23, 34707.8, 78.54274], [1645686540000, 34707.8, 34750.02, 34673.82, 34696.46, 183.64851], [1645686600000, 34696.46, 34719.05, 34652.46, 34705.77, 72.29683], [1645686660000, 34705.77, 34733.58, 34687.28, 34725.61, 53.43299], [1645686720000, 34725.6, 34743.8, 34702.78, 34716.79, 36.03332], [1645686780000, 34716.79, 34737.14, 34692.07, 34737.13, 48.18917], [1645686840000, 34737.14, 34737.46, 34697.87, 34717.08, 40.1754], [1645686900000, 34717.08, 34736.28, 34631.23, 34635.62, 70.32811], [1645686960000, 34635.62, 34711.83, 34621.62, 34693.74, 71.29999], [1645687020000, 34694.39, 34710.49, 34639.79, 34662.68, 59.34022], [1645687080000, 34662.69, 34683.96, 34641.33, 34666.62, 57.88186], [1645687140000, 34666.61, 34700.01, 34649.14, 34649.4, 69.04927], [1645687200000, 34649.4, 34684.9, 34622.52, 34645.24, 81.05564], [1645687260000, 34645.23, 34675.97, 34640.52, 34664.75, 51.48411], [1645687320000, 34664.75, 34730.18, 34655.11, 34720.16, 79.03796], [1645687380000, 34720.16, 34726.53, 34687.39, 34703.86, 38.10701], [1645687440000, 34703.86, 34712.55, 34658.03, 34659.99, 59.18315], [1645687500000, 34660.0, 34717.02, 34613.47, 34711.78, 79.40658], [1645687560000, 34711.78, 34727.5, 34681.81, 34684.2, 48.39693], [1645687620000, 34684.08, 34715.45, 34670.22, 34699.82, 58.81125], [1645687680000, 34699.82, 34717.1, 34654.42, 34654.55, 51.68891], [1645687740000, 34654.56, 34700.3, 34608.19, 34624.09, 75.31154], [1645687800000, 34624.09, 34635.74, 34611.75, 34625.28, 47.07461], [1645687860000, 34625.28, 34625.28, 34562.61, 34580.83, 67.62629], [1645687920000, 34580.82, 34628.58, 34499.99, 34512.66, 272.71953], [1645687980000, 34512.65, 34536.63, 34379.04, 34416.0, 534.40081], [1645688040000, 34416.0, 34529.49, 34403.3, 34428.81, 155.19536], [1645688100000, 34428.8, 34473.55, 34428.8, 34452.52, 80.66482], [1645688160000, 34452.52, 34541.01, 34438.63, 34527.05, 135.3992], [1645688220000, 34527.06, 34653.03, 34512.13, 34646.36, 153.72951], [1645688280000, 34646.37, 34766.03, 34622.15, 34714.35, 149.47181], [1645688340000, 34714.35, 34750.01, 34674.77, 34732.98, 95.77462], [1645688400000, 34731.96, 34750.0, 34695.79, 34704.44, 58.35223], [1645688460000, 34704.45, 34875.47, 34683.37, 34858.74, 153.65168], [1645688520000, 34858.74, 34950.0, 34832.0, 34882.72, 169.04115], [1645688580000, 34882.72, 34955.11, 34862.19, 34941.58, 107.64289], [1645688640000, 34941.59, 35018.66, 34920.01, 34964.23, 137.84923], [1645688700000, 34964.23, 35339.14, 34904.67, 35339.14, 322.89838], [1645688760000, 35334.17, 35515.83, 35302.88, 35338.32, 505.23094], [1645688820000, 35338.32, 35352.17, 35199.9, 35348.0, 173.89254], [1645688880000, 35348.0, 35492.84, 35284.0, 35398.0, 254.23918], [1645688940000, 35383.46, 35405.3, 35288.93, 35313.14, 110.14447], [1645689000000, 35313.13, 35342.13, 35193.7, 35246.1, 198.35554], [1645689060000, 35246.1, 35280.03, 35173.99, 35260.12, 117.91707], [1645689120000, 35260.12, 35294.4, 35192.99, 35254.18, 93.19225], [1645689180000, 35254.17, 35319.92, 35233.32, 35291.88, 111.97937], [1645689240000, 35291.87, 35297.29, 35223.35, 35245.62, 50.65477], [1645689300000, 35245.63, 35297.17, 35186.94, 35215.75, 51.85607], [1645689360000, 35215.75, 35277.11, 35146.3, 35262.28, 69.4573], [1645689420000, 35262.28, 35300.0, 35237.94, 35293.28, 57.19014], [1645689480000, 35293.28, 35396.29, 35282.57, 35385.1, 105.67602], [1645689540000, 35384.87, 35385.1, 35279.39, 35312.05, 80.70492], [1645689600000, 35312.04, 35327.2, 35250.0, 35253.33, 156.9864], [1645689660000, 35253.33, 35289.18, 35180.98, 35265.13, 94.89714], [1645689720000, 35265.14, 35364.11, 35253.8, 35364.08, 101.24324], [1645689780000, 35364.09, 35484.12, 35362.75, 35475.0, 106.17056], [1645689840000, 35475.0, 35500.01, 35413.83, 35429.91, 141.93051], [1645689900000, 35429.92, 35480.13, 35410.94, 35419.31, 86.19717], [1645689960000, 35419.31, 35582.27, 35418.73, 35555.51, 168.8067], [1645690020000, 35555.33, 35700.0, 35554.9, 35605.09, 307.30085], [1645690080000, 35605.1, 35717.77, 35602.27, 35674.46, 136.91366], [1645690140000, 35674.47, 35885.0, 35628.73, 35845.84, 340.7549], [1645690200000, 35845.84, 35872.23, 35608.7, 35678.46, 276.60851], [1645690260000, 35676.68, 35714.08, 35578.68, 35660.98, 145.19391], [1645690320000, 35660.98, 35688.0, 35535.7, 35607.16, 198.21665], [1645690380000, 35607.16, 35699.85, 35607.16, 35635.92, 107.45415], [1645690440000, 35635.93, 35659.2, 35563.01, 35613.34, 120.87848], [1645690500000, 35613.33, 35613.34, 35500.6, 35514.69, 178.6525], [1645690560000, 35514.7, 35573.99, 35327.11, 35417.0, 311.00331], [1645690620000, 35417.0, 35531.45, 35378.92, 35518.0, 220.99492], [1645690680000, 35519.05, 35519.24, 35412.21, 35488.91, 77.45339], [1645690740000, 35488.91, 35497.73, 35420.75, 35450.19, 125.6561]]

@pytest.mark.skipif(
    not henv.execute_repo_config_code("is_CK_S3_available()"),
    reason="Run only if CK S3 is available",
)
@umock.patch("im_v2.ccxt.data.extract.extractor.CcxtExtractor", CcxtExtractorMock)
class TestCcxtExtractor1(hunitest.TestCase):
    def test_initialize_class(self) -> None:
        """
        Smoke test that the class is being initialized correctly.
        """
        _ = ivcdexex.CcxtExtractor("binance", "spot")

    def test_get_exchange_currency_pairs(self) -> None:
        """
        Test that a non-empty list of exchange currencies is loaded.
        """
        # Extract a list of currencies.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        curr_list = exchange_class.get_exchange_currency_pairs()
        # Verify that the output is a non-empty list with only string values.
        hdbg.dassert_container_type(curr_list, list, str)
        self.assertGreater(len(curr_list), 0)

    @umock.patch.object(ivcdexex.hdateti, "get_current_time")
    def test_download_ohlcv1(
        self, mock_get_current_time: umock.MagicMock
    ) -> None:
        """
        Test download for historical data.
        """
        mock_get_current_time.return_value = "2022-02-24 00:00:00.000000+00:00"
        start_timestamp = pd.Timestamp("2022-02-24T00:00:00Z")
        end_timestamp = pd.Timestamp("2022-02-25T00:00:00Z")
        actual = self._download_ohlcv(start_timestamp, end_timestamp)
        # Verify dataframe length.
        self.assertEqual(1500, actual.shape[0])
        # Check number of calls and args for current time.
        self.assertEqual(mock_get_current_time.call_count, 3)
        self.assertEqual(mock_get_current_time.call_args.args, ("UTC",))
        # Verify corner datetime if output is not empty.
        first_date = int(actual["timestamp"].iloc[0])
        last_date = int(actual["timestamp"].iloc[-1])
        # self.assertEqual(1631145600000, first_date)
        # self.assertEqual(1631235540000, last_date)
        # Check the output values.
        actual = hpandas.convert_df_to_json_string(actual, n_tail=None)
        self.check_string(actual)

    def test_download_ohlcv2(self) -> None:
        """
        Test download for latest bars when no timestamps are provided.
        """
        actual = self._download_ohlcv(None, None)
        # Verify dataframe length. Only one bar is obtained.
        self.assertEqual(500, actual.shape[0])

    def test_download_ohlcv_invalid_input1(self) -> None:
        """
        Run with invalid start timestamp.
        """
        # Initialize class.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        # Run with invalid input.
        start_timestamp = "invalid"
        end_timestamp = pd.Timestamp("2021-09-10T00:00:00Z")
        with pytest.raises(AssertionError) as fail:
            exchange_class._download_ohlcv(
                exchange_id="binance",
                currency_pair="BTC/USDT",
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
            )
        # Check output for error.
        actual = str(fail.value)
        expected = (
            "'invalid' is '<class 'str'>' instead of "
            "'<class 'pandas._libs.tslibs.timestamps.Timestamp'"
        )
        self.assertIn(expected, actual)

    @pytest.mark.skip(reason="CMTask2089")
    def test_download_ohlcv_invalid_input2(self) -> None:
        """
        Run with invalid end timestamp.
        """
        # Initialize class.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        # Run with invalid input.
        start_timestamp = pd.Timestamp("2021-09-09T00:00:00Z")
        end_timestamp = "invalid"
        with pytest.raises(AssertionError) as fail:
            exchange_class._download_ohlcv(
                exchange_id="binance",
                currency_pair="BTC/USDT",
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
            )
        # Check output for error.
        actual = str(fail.value)
        expected = (
            "'invalid' is '<class 'str'>' instead of "
            "'<class 'pandas._libs.tslibs.timestamps.Timestamp'"
        )
        self.assertIn(expected, actual)

    def test_download_ohlcv_invalid_input3(self) -> None:
        """
        Run with invalid range.

        Start greater than the end.
        """
        # Initialize class.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        # Run with invalid input.
        start_timestamp = pd.Timestamp("2021-09-10T00:00:00Z")
        end_timestamp = pd.Timestamp("2021-09-09T00:00:00Z")
        with pytest.raises(AssertionError) as fail:
            exchange_class._download_ohlcv(
                exchange_id="binance",
                currency_pair="BTC/USDT",
                start_timestamp=start_timestamp,
                end_timestamp=end_timestamp,
            )
        # Check output for error.
        actual = str(fail.value)
        expected = "2021-09-10 00:00:00+00:00 <= 2021-09-09 00:00:00+00:00"
        self.assertIn(expected, actual)

    def test_download_ohlcv_invalid_input4(self) -> None:
        """
        Run with invalid currency pair.
        """
        # Initialize class.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        # Run with invalid input.
        with pytest.raises(AssertionError) as fail:
            exchange_class._download_ohlcv(
                exchange_id="binance",
                currency_pair="invalid_currency_pair",
                start_timestamp=None,
                end_timestamp=None,
            )
        # Check output for error.
        actual = str(fail.value)
        expected = "Currency pair is not present in exchange"
        self.assertIn(expected, actual)

    def test_download_order_book(self) -> None:
        """
        Verify that order book is downloaded correctly.
        """
        exchange_class = ivcdexex.CcxtExtractor("gateio", "spot")
        order_book = exchange_class.download_order_book("BTC_USDT")
        order_book_keys = [
            "symbol",
            "bids",
            "asks",
            "timestamp",
            "datetime",
            "nonce",
        ]
        self.assertListEqual(order_book_keys, list(order_book.keys()))

    @pytest.mark.skip(reason="CMTask2089")
    def test_download_order_book_invalid_input1(self) -> None:
        """
        Run with invalid currency pair.
        """
        # Initialize class.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        # Run with invalid input.
        with pytest.raises(AssertionError) as fail:
            exchange_class.download_order_book("invalid_currency_pair")
        # Check output for error.
        actual = str(fail.value)
        expected = "Currency pair is not present in exchange"
        self.assertIn(expected, actual)

    def _download_ohlcv(
        self,
        start_timestamp: Optional[pd.Timestamp],
        end_timestamp: Optional[pd.Timestamp],
    ) -> pd.DataFrame:
        """
        Test that data is being loaded correctly.

        Data is returned for further checking in different tests.
        """
        # Initiate class and set date parameters.
        exchange_class = ivcdexex.CcxtExtractor("binance", "spot")
        # Extract data.
        actual = exchange_class._download_ohlcv(
            currency_pair="DUMMY/DUMMY",
            exchange_id="binance",
            start_timestamp=start_timestamp,
            end_timestamp=end_timestamp,
        )
        # Verify that the output is a dataframe.
        hdbg.dassert_isinstance(actual, pd.DataFrame)
        # Verify column names.
        exp_col_names = [
            "timestamp",
            "open",
            "high",
            "low",
            "close",
            "volume",
            "end_download_timestamp",
        ]
        self.assertEqual(exp_col_names, actual.columns.to_list())
        # Verify types inside each column.
        col_types = [col_type.name for col_type in actual.dtypes]
        exp_col_types = [
            "int64",
            "float64",
            "float64",
            "float64",
            "float64",
            "float64",
            "object",
        ]
        self.assertListEqual(exp_col_types, col_types)
        return actual
